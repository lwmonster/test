/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef client_define_TYPES_H
#define client_define_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace client {

class CommunicateMessage;

typedef struct _CommunicateMessage__isset {
  _CommunicateMessage__isset() : timestamp(false), categories(false), myMap(false) {}
  bool timestamp :1;
  bool categories :1;
  bool myMap :1;
} _CommunicateMessage__isset;

class CommunicateMessage {
 public:

  CommunicateMessage(const CommunicateMessage&);
  CommunicateMessage& operator=(const CommunicateMessage&);
  CommunicateMessage() : timestamp(0) {
  }

  virtual ~CommunicateMessage() throw();
  int64_t timestamp;
  std::vector<std::string>  categories;
  std::map<int64_t, std::string>  myMap;

  _CommunicateMessage__isset __isset;

  void __set_timestamp(const int64_t val);

  void __set_categories(const std::vector<std::string> & val);

  void __set_myMap(const std::map<int64_t, std::string> & val);

  bool operator == (const CommunicateMessage & rhs) const
  {
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.categories != rhs.__isset.categories)
      return false;
    else if (__isset.categories && !(categories == rhs.categories))
      return false;
    if (__isset.myMap != rhs.__isset.myMap)
      return false;
    else if (__isset.myMap && !(myMap == rhs.myMap))
      return false;
    return true;
  }
  bool operator != (const CommunicateMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommunicateMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommunicateMessage &a, CommunicateMessage &b);

inline std::ostream& operator<<(std::ostream& out, const CommunicateMessage& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
