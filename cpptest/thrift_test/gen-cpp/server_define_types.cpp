/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "server_define_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace server {


CommunicateMessage::~CommunicateMessage() throw() {
}


void CommunicateMessage::__set_timestamp(const int64_t val) {
  this->timestamp = val;
__isset.timestamp = true;
}

void CommunicateMessage::__set_categories(const std::vector<std::string> & val) {
  this->categories = val;
__isset.categories = true;
}

void CommunicateMessage::__set_myMap(const std::map<int64_t, std::string> & val) {
  this->myMap = val;
__isset.myMap = true;
}

void CommunicateMessage::__set_newMap(const std::map<int64_t, std::string> & val) {
  this->newMap = val;
__isset.newMap = true;
}

uint32_t CommunicateMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->categories.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->categories.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->categories[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.categories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->myMap.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _ktype6;
            ::apache::thrift::protocol::TType _vtype7;
            xfer += iprot->readMapBegin(_ktype6, _vtype7, _size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              int64_t _key10;
              xfer += iprot->readI64(_key10);
              std::string& _val11 = this->myMap[_key10];
              xfer += iprot->readString(_val11);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.myMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->newMap.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _ktype13;
            ::apache::thrift::protocol::TType _vtype14;
            xfer += iprot->readMapBegin(_ktype13, _vtype14, _size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              int64_t _key17;
              xfer += iprot->readI64(_key17);
              std::string& _val18 = this->newMap[_key17];
              xfer += iprot->readString(_val18);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.newMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommunicateMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommunicateMessage");

  if (this->__isset.timestamp) {
    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.categories) {
    xfer += oprot->writeFieldBegin("categories", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->categories.size()));
      std::vector<std::string> ::const_iterator _iter19;
      for (_iter19 = this->categories.begin(); _iter19 != this->categories.end(); ++_iter19)
      {
        xfer += oprot->writeString((*_iter19));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.myMap) {
    xfer += oprot->writeFieldBegin("myMap", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->myMap.size()));
      std::map<int64_t, std::string> ::const_iterator _iter20;
      for (_iter20 = this->myMap.begin(); _iter20 != this->myMap.end(); ++_iter20)
      {
        xfer += oprot->writeI64(_iter20->first);
        xfer += oprot->writeString(_iter20->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newMap) {
    xfer += oprot->writeFieldBegin("newMap", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->newMap.size()));
      std::map<int64_t, std::string> ::const_iterator _iter21;
      for (_iter21 = this->newMap.begin(); _iter21 != this->newMap.end(); ++_iter21)
      {
        xfer += oprot->writeI64(_iter21->first);
        xfer += oprot->writeString(_iter21->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommunicateMessage &a, CommunicateMessage &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.categories, b.categories);
  swap(a.myMap, b.myMap);
  swap(a.newMap, b.newMap);
  swap(a.__isset, b.__isset);
}

CommunicateMessage::CommunicateMessage(const CommunicateMessage& other22) {
  timestamp = other22.timestamp;
  categories = other22.categories;
  myMap = other22.myMap;
  newMap = other22.newMap;
  __isset = other22.__isset;
}
CommunicateMessage& CommunicateMessage::operator=(const CommunicateMessage& other23) {
  timestamp = other23.timestamp;
  categories = other23.categories;
  myMap = other23.myMap;
  newMap = other23.newMap;
  __isset = other23.__isset;
  return *this;
}
void CommunicateMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommunicateMessage(";
  out << "timestamp="; (__isset.timestamp ? (out << to_string(timestamp)) : (out << "<null>"));
  out << ", " << "categories="; (__isset.categories ? (out << to_string(categories)) : (out << "<null>"));
  out << ", " << "myMap="; (__isset.myMap ? (out << to_string(myMap)) : (out << "<null>"));
  out << ", " << "newMap="; (__isset.newMap ? (out << to_string(newMap)) : (out << "<null>"));
  out << ")";
}

} // namespace
