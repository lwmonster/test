// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature.proto

#ifndef PROTOBUF_feature_2eproto__INCLUDED
#define PROTOBUF_feature_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_feature_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBaseFeatureUnitImpl();
void InitDefaultsBaseFeatureUnit();
void InitDefaultsFeatureUnitImpl();
void InitDefaultsFeatureUnit();
void InitDefaultsFeatureUnitCollection_FeatureUnitMapEntry_DoNotUseImpl();
void InitDefaultsFeatureUnitCollection_FeatureUnitMapEntry_DoNotUse();
void InitDefaultsFeatureUnitCollectionImpl();
void InitDefaultsFeatureUnitCollection();
void InitDefaultsDocFeaturesImpl();
void InitDefaultsDocFeatures();
void InitDefaultsDocFeaturesListImpl();
void InitDefaultsDocFeaturesList();
void InitDefaultsFeatureInfoImpl();
void InitDefaultsFeatureInfo();
void InitDefaultsItemInfo_LdaVectorEntry_DoNotUseImpl();
void InitDefaultsItemInfo_LdaVectorEntry_DoNotUse();
void InitDefaultsItemInfo_ClarityEntry_DoNotUseImpl();
void InitDefaultsItemInfo_ClarityEntry_DoNotUse();
void InitDefaultsItemInfo_BlackBolderEntry_DoNotUseImpl();
void InitDefaultsItemInfo_BlackBolderEntry_DoNotUse();
void InitDefaultsItemInfoImpl();
void InitDefaultsItemInfo();
void InitDefaultsItemInfoOrigin_LdaVectorEntry_DoNotUseImpl();
void InitDefaultsItemInfoOrigin_LdaVectorEntry_DoNotUse();
void InitDefaultsItemInfoOrigin_ClarityEntry_DoNotUseImpl();
void InitDefaultsItemInfoOrigin_ClarityEntry_DoNotUse();
void InitDefaultsItemInfoOrigin_BlackBolderEntry_DoNotUseImpl();
void InitDefaultsItemInfoOrigin_BlackBolderEntry_DoNotUse();
void InitDefaultsItemInfoOriginImpl();
void InitDefaultsItemInfoOrigin();
void InitDefaultsItemInfoListImpl();
void InitDefaultsItemInfoList();
inline void InitDefaults() {
  InitDefaultsBaseFeatureUnit();
  InitDefaultsFeatureUnit();
  InitDefaultsFeatureUnitCollection_FeatureUnitMapEntry_DoNotUse();
  InitDefaultsFeatureUnitCollection();
  InitDefaultsDocFeatures();
  InitDefaultsDocFeaturesList();
  InitDefaultsFeatureInfo();
  InitDefaultsItemInfo_LdaVectorEntry_DoNotUse();
  InitDefaultsItemInfo_ClarityEntry_DoNotUse();
  InitDefaultsItemInfo_BlackBolderEntry_DoNotUse();
  InitDefaultsItemInfo();
  InitDefaultsItemInfoOrigin_LdaVectorEntry_DoNotUse();
  InitDefaultsItemInfoOrigin_ClarityEntry_DoNotUse();
  InitDefaultsItemInfoOrigin_BlackBolderEntry_DoNotUse();
  InitDefaultsItemInfoOrigin();
  InitDefaultsItemInfoList();
}
}  // namespace protobuf_feature_2eproto
namespace predictor {
namespace feature {
namespace framework {
class BaseFeatureUnit;
class BaseFeatureUnitDefaultTypeInternal;
extern BaseFeatureUnitDefaultTypeInternal _BaseFeatureUnit_default_instance_;
class DocFeatures;
class DocFeaturesDefaultTypeInternal;
extern DocFeaturesDefaultTypeInternal _DocFeatures_default_instance_;
class DocFeaturesList;
class DocFeaturesListDefaultTypeInternal;
extern DocFeaturesListDefaultTypeInternal _DocFeaturesList_default_instance_;
class FeatureInfo;
class FeatureInfoDefaultTypeInternal;
extern FeatureInfoDefaultTypeInternal _FeatureInfo_default_instance_;
class FeatureUnit;
class FeatureUnitDefaultTypeInternal;
extern FeatureUnitDefaultTypeInternal _FeatureUnit_default_instance_;
class FeatureUnitCollection;
class FeatureUnitCollectionDefaultTypeInternal;
extern FeatureUnitCollectionDefaultTypeInternal _FeatureUnitCollection_default_instance_;
class FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse;
class FeatureUnitCollection_FeatureUnitMapEntry_DoNotUseDefaultTypeInternal;
extern FeatureUnitCollection_FeatureUnitMapEntry_DoNotUseDefaultTypeInternal _FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse_default_instance_;
class ItemInfo;
class ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class ItemInfoList;
class ItemInfoListDefaultTypeInternal;
extern ItemInfoListDefaultTypeInternal _ItemInfoList_default_instance_;
class ItemInfoOrigin;
class ItemInfoOriginDefaultTypeInternal;
extern ItemInfoOriginDefaultTypeInternal _ItemInfoOrigin_default_instance_;
class ItemInfoOrigin_BlackBolderEntry_DoNotUse;
class ItemInfoOrigin_BlackBolderEntry_DoNotUseDefaultTypeInternal;
extern ItemInfoOrigin_BlackBolderEntry_DoNotUseDefaultTypeInternal _ItemInfoOrigin_BlackBolderEntry_DoNotUse_default_instance_;
class ItemInfoOrigin_ClarityEntry_DoNotUse;
class ItemInfoOrigin_ClarityEntry_DoNotUseDefaultTypeInternal;
extern ItemInfoOrigin_ClarityEntry_DoNotUseDefaultTypeInternal _ItemInfoOrigin_ClarityEntry_DoNotUse_default_instance_;
class ItemInfoOrigin_LdaVectorEntry_DoNotUse;
class ItemInfoOrigin_LdaVectorEntry_DoNotUseDefaultTypeInternal;
extern ItemInfoOrigin_LdaVectorEntry_DoNotUseDefaultTypeInternal _ItemInfoOrigin_LdaVectorEntry_DoNotUse_default_instance_;
class ItemInfo_BlackBolderEntry_DoNotUse;
class ItemInfo_BlackBolderEntry_DoNotUseDefaultTypeInternal;
extern ItemInfo_BlackBolderEntry_DoNotUseDefaultTypeInternal _ItemInfo_BlackBolderEntry_DoNotUse_default_instance_;
class ItemInfo_ClarityEntry_DoNotUse;
class ItemInfo_ClarityEntry_DoNotUseDefaultTypeInternal;
extern ItemInfo_ClarityEntry_DoNotUseDefaultTypeInternal _ItemInfo_ClarityEntry_DoNotUse_default_instance_;
class ItemInfo_LdaVectorEntry_DoNotUse;
class ItemInfo_LdaVectorEntry_DoNotUseDefaultTypeInternal;
extern ItemInfo_LdaVectorEntry_DoNotUseDefaultTypeInternal _ItemInfo_LdaVectorEntry_DoNotUse_default_instance_;
}  // namespace framework
}  // namespace feature
}  // namespace predictor
namespace predictor {
namespace feature {
namespace framework {

// ===================================================================

class BaseFeatureUnit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.BaseFeatureUnit) */ {
 public:
  BaseFeatureUnit();
  virtual ~BaseFeatureUnit();

  BaseFeatureUnit(const BaseFeatureUnit& from);

  inline BaseFeatureUnit& operator=(const BaseFeatureUnit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseFeatureUnit(BaseFeatureUnit&& from) noexcept
    : BaseFeatureUnit() {
    *this = ::std::move(from);
  }

  inline BaseFeatureUnit& operator=(BaseFeatureUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseFeatureUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseFeatureUnit* internal_default_instance() {
    return reinterpret_cast<const BaseFeatureUnit*>(
               &_BaseFeatureUnit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BaseFeatureUnit* other);
  friend void swap(BaseFeatureUnit& a, BaseFeatureUnit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseFeatureUnit* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseFeatureUnit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseFeatureUnit& from);
  void MergeFrom(const BaseFeatureUnit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseFeatureUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sub_group_name = 20;
  void clear_sub_group_name();
  static const int kSubGroupNameFieldNumber = 20;
  const ::std::string& sub_group_name() const;
  void set_sub_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sub_group_name(::std::string&& value);
  #endif
  void set_sub_group_name(const char* value);
  void set_sub_group_name(const char* value, size_t size);
  ::std::string* mutable_sub_group_name();
  ::std::string* release_sub_group_name();
  void set_allocated_sub_group_name(::std::string* sub_group_name);

  // string u_value = 21;
  void clear_u_value();
  static const int kUValueFieldNumber = 21;
  const ::std::string& u_value() const;
  void set_u_value(const ::std::string& value);
  #if LANG_CXX11
  void set_u_value(::std::string&& value);
  #endif
  void set_u_value(const char* value);
  void set_u_value(const char* value, size_t size);
  ::std::string* mutable_u_value();
  ::std::string* release_u_value();
  void set_allocated_u_value(::std::string* u_value);

  // string d_value = 22;
  void clear_d_value();
  static const int kDValueFieldNumber = 22;
  const ::std::string& d_value() const;
  void set_d_value(const ::std::string& value);
  #if LANG_CXX11
  void set_d_value(::std::string&& value);
  #endif
  void set_d_value(const char* value);
  void set_d_value(const char* value, size_t size);
  ::std::string* mutable_d_value();
  ::std::string* release_d_value();
  void set_allocated_d_value(::std::string* d_value);

  // string fea = 23;
  void clear_fea();
  static const int kFeaFieldNumber = 23;
  const ::std::string& fea() const;
  void set_fea(const ::std::string& value);
  #if LANG_CXX11
  void set_fea(::std::string&& value);
  #endif
  void set_fea(const char* value);
  void set_fea(const char* value, size_t size);
  ::std::string* mutable_fea();
  ::std::string* release_fea();
  void set_allocated_fea(::std::string* fea);

  // uint64 gkey = 1;
  void clear_gkey();
  static const int kGkeyFieldNumber = 1;
  ::google::protobuf::uint64 gkey() const;
  void set_gkey(::google::protobuf::uint64 value);

  // uint64 ukey = 2;
  void clear_ukey();
  static const int kUkeyFieldNumber = 2;
  ::google::protobuf::uint64 ukey() const;
  void set_ukey(::google::protobuf::uint64 value);

  // uint64 dkey = 3;
  void clear_dkey();
  static const int kDkeyFieldNumber = 3;
  ::google::protobuf::uint64 dkey() const;
  void set_dkey(::google::protobuf::uint64 value);

  // uint64 identifier = 4;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 4;
  ::google::protobuf::uint64 identifier() const;
  void set_identifier(::google::protobuf::uint64 value);

  // double value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.BaseFeatureUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sub_group_name_;
  ::google::protobuf::internal::ArenaStringPtr u_value_;
  ::google::protobuf::internal::ArenaStringPtr d_value_;
  ::google::protobuf::internal::ArenaStringPtr fea_;
  ::google::protobuf::uint64 gkey_;
  ::google::protobuf::uint64 ukey_;
  ::google::protobuf::uint64 dkey_;
  ::google::protobuf::uint64 identifier_;
  double value_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsBaseFeatureUnitImpl();
};
// -------------------------------------------------------------------

class FeatureUnit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.FeatureUnit) */ {
 public:
  FeatureUnit();
  virtual ~FeatureUnit();

  FeatureUnit(const FeatureUnit& from);

  inline FeatureUnit& operator=(const FeatureUnit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureUnit(FeatureUnit&& from) noexcept
    : FeatureUnit() {
    *this = ::std::move(from);
  }

  inline FeatureUnit& operator=(FeatureUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureUnit* internal_default_instance() {
    return reinterpret_cast<const FeatureUnit*>(
               &_FeatureUnit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FeatureUnit* other);
  friend void swap(FeatureUnit& a, FeatureUnit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureUnit* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureUnit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureUnit& from);
  void MergeFrom(const FeatureUnit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .predictor.feature.framework.BaseFeatureUnit base_feature_unit_vec = 5;
  int base_feature_unit_vec_size() const;
  void clear_base_feature_unit_vec();
  static const int kBaseFeatureUnitVecFieldNumber = 5;
  const ::predictor::feature::framework::BaseFeatureUnit& base_feature_unit_vec(int index) const;
  ::predictor::feature::framework::BaseFeatureUnit* mutable_base_feature_unit_vec(int index);
  ::predictor::feature::framework::BaseFeatureUnit* add_base_feature_unit_vec();
  ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::BaseFeatureUnit >*
      mutable_base_feature_unit_vec();
  const ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::BaseFeatureUnit >&
      base_feature_unit_vec() const;

  // string group_name = 20;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 20;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // uint64 gkey = 1;
  void clear_gkey();
  static const int kGkeyFieldNumber = 1;
  ::google::protobuf::uint64 gkey() const;
  void set_gkey(::google::protobuf::uint64 value);

  // bool need_output = 2;
  void clear_need_output();
  static const int kNeedOutputFieldNumber = 2;
  bool need_output() const;
  void set_need_output(bool value);

  // int32 field = 3;
  void clear_field();
  static const int kFieldFieldNumber = 3;
  ::google::protobuf::int32 field() const;
  void set_field(::google::protobuf::int32 value);

  // int32 dnn_group = 4;
  void clear_dnn_group();
  static const int kDnnGroupFieldNumber = 4;
  ::google::protobuf::int32 dnn_group() const;
  void set_dnn_group(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.FeatureUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::BaseFeatureUnit > base_feature_unit_vec_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  ::google::protobuf::uint64 gkey_;
  bool need_output_;
  ::google::protobuf::int32 field_;
  ::google::protobuf::int32 dnn_group_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsFeatureUnitImpl();
};
// -------------------------------------------------------------------

class FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse, 
    ::google::protobuf::uint64, ::predictor::feature::framework::FeatureUnit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse, 
    ::google::protobuf::uint64, ::predictor::feature::framework::FeatureUnit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse();
  FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse& other);
  static const FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse*>(&_FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FeatureUnitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.FeatureUnitCollection) */ {
 public:
  FeatureUnitCollection();
  virtual ~FeatureUnitCollection();

  FeatureUnitCollection(const FeatureUnitCollection& from);

  inline FeatureUnitCollection& operator=(const FeatureUnitCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureUnitCollection(FeatureUnitCollection&& from) noexcept
    : FeatureUnitCollection() {
    *this = ::std::move(from);
  }

  inline FeatureUnitCollection& operator=(FeatureUnitCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureUnitCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureUnitCollection* internal_default_instance() {
    return reinterpret_cast<const FeatureUnitCollection*>(
               &_FeatureUnitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FeatureUnitCollection* other);
  friend void swap(FeatureUnitCollection& a, FeatureUnitCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureUnitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureUnitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureUnitCollection& from);
  void MergeFrom(const FeatureUnitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureUnitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint64, .predictor.feature.framework.FeatureUnit> feature_unit_map = 1;
  int feature_unit_map_size() const;
  void clear_feature_unit_map();
  static const int kFeatureUnitMapFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint64, ::predictor::feature::framework::FeatureUnit >&
      feature_unit_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, ::predictor::feature::framework::FeatureUnit >*
      mutable_feature_unit_map();

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.FeatureUnitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      FeatureUnitCollection_FeatureUnitMapEntry_DoNotUse,
      ::google::protobuf::uint64, ::predictor::feature::framework::FeatureUnit,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > feature_unit_map_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsFeatureUnitCollectionImpl();
};
// -------------------------------------------------------------------

class DocFeatures : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.DocFeatures) */ {
 public:
  DocFeatures();
  virtual ~DocFeatures();

  DocFeatures(const DocFeatures& from);

  inline DocFeatures& operator=(const DocFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocFeatures(DocFeatures&& from) noexcept
    : DocFeatures() {
    *this = ::std::move(from);
  }

  inline DocFeatures& operator=(DocFeatures&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocFeatures& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocFeatures* internal_default_instance() {
    return reinterpret_cast<const DocFeatures*>(
               &_DocFeatures_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DocFeatures* other);
  friend void swap(DocFeatures& a, DocFeatures& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocFeatures* New() const PROTOBUF_FINAL { return New(NULL); }

  DocFeatures* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocFeatures& from);
  void MergeFrom(const DocFeatures& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocFeatures* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  const ::std::string& doc_id() const;
  void set_doc_id(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_id(::std::string&& value);
  #endif
  void set_doc_id(const char* value);
  void set_doc_id(const char* value, size_t size);
  ::std::string* mutable_doc_id();
  ::std::string* release_doc_id();
  void set_allocated_doc_id(::std::string* doc_id);

  // .predictor.feature.framework.FeatureUnitCollection feature_unit_collection = 2;
  bool has_feature_unit_collection() const;
  void clear_feature_unit_collection();
  static const int kFeatureUnitCollectionFieldNumber = 2;
  const ::predictor::feature::framework::FeatureUnitCollection& feature_unit_collection() const;
  ::predictor::feature::framework::FeatureUnitCollection* release_feature_unit_collection();
  ::predictor::feature::framework::FeatureUnitCollection* mutable_feature_unit_collection();
  void set_allocated_feature_unit_collection(::predictor::feature::framework::FeatureUnitCollection* feature_unit_collection);

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.DocFeatures)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr doc_id_;
  ::predictor::feature::framework::FeatureUnitCollection* feature_unit_collection_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsDocFeaturesImpl();
};
// -------------------------------------------------------------------

class DocFeaturesList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.DocFeaturesList) */ {
 public:
  DocFeaturesList();
  virtual ~DocFeaturesList();

  DocFeaturesList(const DocFeaturesList& from);

  inline DocFeaturesList& operator=(const DocFeaturesList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocFeaturesList(DocFeaturesList&& from) noexcept
    : DocFeaturesList() {
    *this = ::std::move(from);
  }

  inline DocFeaturesList& operator=(DocFeaturesList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocFeaturesList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocFeaturesList* internal_default_instance() {
    return reinterpret_cast<const DocFeaturesList*>(
               &_DocFeaturesList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DocFeaturesList* other);
  friend void swap(DocFeaturesList& a, DocFeaturesList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocFeaturesList* New() const PROTOBUF_FINAL { return New(NULL); }

  DocFeaturesList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocFeaturesList& from);
  void MergeFrom(const DocFeaturesList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocFeaturesList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .predictor.feature.framework.DocFeatures doc_features_list = 1;
  int doc_features_list_size() const;
  void clear_doc_features_list();
  static const int kDocFeaturesListFieldNumber = 1;
  const ::predictor::feature::framework::DocFeatures& doc_features_list(int index) const;
  ::predictor::feature::framework::DocFeatures* mutable_doc_features_list(int index);
  ::predictor::feature::framework::DocFeatures* add_doc_features_list();
  ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::DocFeatures >*
      mutable_doc_features_list();
  const ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::DocFeatures >&
      doc_features_list() const;

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.DocFeaturesList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::DocFeatures > doc_features_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsDocFeaturesListImpl();
};
// -------------------------------------------------------------------

class FeatureInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.FeatureInfo) */ {
 public:
  FeatureInfo();
  virtual ~FeatureInfo();

  FeatureInfo(const FeatureInfo& from);

  inline FeatureInfo& operator=(const FeatureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureInfo(FeatureInfo&& from) noexcept
    : FeatureInfo() {
    *this = ::std::move(from);
  }

  inline FeatureInfo& operator=(FeatureInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureInfo* internal_default_instance() {
    return reinterpret_cast<const FeatureInfo*>(
               &_FeatureInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FeatureInfo* other);
  friend void swap(FeatureInfo& a, FeatureInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureInfo& from);
  void MergeFrom(const FeatureInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .predictor.feature.framework.FeatureUnitCollection common_feas = 1;
  bool has_common_feas() const;
  void clear_common_feas();
  static const int kCommonFeasFieldNumber = 1;
  const ::predictor::feature::framework::FeatureUnitCollection& common_feas() const;
  ::predictor::feature::framework::FeatureUnitCollection* release_common_feas();
  ::predictor::feature::framework::FeatureUnitCollection* mutable_common_feas();
  void set_allocated_common_feas(::predictor::feature::framework::FeatureUnitCollection* common_feas);

  // .predictor.feature.framework.DocFeaturesList doc_features_list = 2;
  bool has_doc_features_list() const;
  void clear_doc_features_list();
  static const int kDocFeaturesListFieldNumber = 2;
  const ::predictor::feature::framework::DocFeaturesList& doc_features_list() const;
  ::predictor::feature::framework::DocFeaturesList* release_doc_features_list();
  ::predictor::feature::framework::DocFeaturesList* mutable_doc_features_list();
  void set_allocated_doc_features_list(::predictor::feature::framework::DocFeaturesList* doc_features_list);

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.FeatureInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::predictor::feature::framework::FeatureUnitCollection* common_feas_;
  ::predictor::feature::framework::DocFeaturesList* doc_features_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsFeatureInfoImpl();
};
// -------------------------------------------------------------------

class ItemInfo_LdaVectorEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ItemInfo_LdaVectorEntry_DoNotUse, 
    ::google::protobuf::uint64, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ItemInfo_LdaVectorEntry_DoNotUse, 
    ::google::protobuf::uint64, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  ItemInfo_LdaVectorEntry_DoNotUse();
  ItemInfo_LdaVectorEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ItemInfo_LdaVectorEntry_DoNotUse& other);
  static const ItemInfo_LdaVectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ItemInfo_LdaVectorEntry_DoNotUse*>(&_ItemInfo_LdaVectorEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ItemInfo_ClarityEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ItemInfo_ClarityEntry_DoNotUse, 
    ::google::protobuf::uint64, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ItemInfo_ClarityEntry_DoNotUse, 
    ::google::protobuf::uint64, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  ItemInfo_ClarityEntry_DoNotUse();
  ItemInfo_ClarityEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ItemInfo_ClarityEntry_DoNotUse& other);
  static const ItemInfo_ClarityEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ItemInfo_ClarityEntry_DoNotUse*>(&_ItemInfo_ClarityEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ItemInfo_BlackBolderEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ItemInfo_BlackBolderEntry_DoNotUse, 
    ::google::protobuf::uint64, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ItemInfo_BlackBolderEntry_DoNotUse, 
    ::google::protobuf::uint64, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  ItemInfo_BlackBolderEntry_DoNotUse();
  ItemInfo_BlackBolderEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ItemInfo_BlackBolderEntry_DoNotUse& other);
  static const ItemInfo_BlackBolderEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ItemInfo_BlackBolderEntry_DoNotUse*>(&_ItemInfo_BlackBolderEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ItemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.ItemInfo) */ {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ItemInfo* other);
  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ItemInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ItemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated uint64 tags = 20;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 20;
  ::google::protobuf::uint64 tags(int index) const;
  void set_tags(int index, ::google::protobuf::uint64 value);
  void add_tags(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tags() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tags();

  // repeated uint64 category = 21;
  int category_size() const;
  void clear_category();
  static const int kCategoryFieldNumber = 21;
  ::google::protobuf::uint64 category(int index) const;
  void set_category(int index, ::google::protobuf::uint64 value);
  void add_category(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      category() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_category();

  // repeated uint64 subcategories = 22;
  int subcategories_size() const;
  void clear_subcategories();
  static const int kSubcategoriesFieldNumber = 22;
  ::google::protobuf::uint64 subcategories(int index) const;
  void set_subcategories(int index, ::google::protobuf::uint64 value);
  void add_subcategories(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      subcategories() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_subcategories();

  // repeated uint64 locations = 23;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 23;
  ::google::protobuf::uint64 locations(int index) const;
  void set_locations(int index, ::google::protobuf::uint64 value);
  void add_locations(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      locations() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_locations();

  // repeated uint64 lbs_locations = 24;
  int lbs_locations_size() const;
  void clear_lbs_locations();
  static const int kLbsLocationsFieldNumber = 24;
  ::google::protobuf::uint64 lbs_locations(int index) const;
  void set_lbs_locations(int index, ::google::protobuf::uint64 value);
  void add_lbs_locations(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lbs_locations() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lbs_locations();

  // map<uint64, double> lda_vector = 25;
  int lda_vector_size() const;
  void clear_lda_vector();
  static const int kLdaVectorFieldNumber = 25;
  const ::google::protobuf::Map< ::google::protobuf::uint64, double >&
      lda_vector() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, double >*
      mutable_lda_vector();

  // repeated uint64 body_tags = 27;
  int body_tags_size() const;
  void clear_body_tags();
  static const int kBodyTagsFieldNumber = 27;
  ::google::protobuf::uint64 body_tags(int index) const;
  void set_body_tags(int index, ::google::protobuf::uint64 value);
  void add_body_tags(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      body_tags() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_body_tags();

  // map<uint64, double> clarity = 38;
  int clarity_size() const;
  void clear_clarity();
  static const int kClarityFieldNumber = 38;
  const ::google::protobuf::Map< ::google::protobuf::uint64, double >&
      clarity() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, double >*
      mutable_clarity();

  // map<uint64, double> blackBolder = 39;
  int blackbolder_size() const;
  void clear_blackbolder();
  static const int kBlackBolderFieldNumber = 39;
  const ::google::protobuf::Map< ::google::protobuf::uint64, double >&
      blackbolder() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, double >*
      mutable_blackbolder();

  // repeated uint64 nCategory1 = 40;
  int ncategory1_size() const;
  void clear_ncategory1();
  static const int kNCategory1FieldNumber = 40;
  ::google::protobuf::uint64 ncategory1(int index) const;
  void set_ncategory1(int index, ::google::protobuf::uint64 value);
  void add_ncategory1(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ncategory1() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ncategory1();

  // repeated uint64 nSubCategory1 = 41;
  int nsubcategory1_size() const;
  void clear_nsubcategory1();
  static const int kNSubCategory1FieldNumber = 41;
  ::google::protobuf::uint64 nsubcategory1(int index) const;
  void set_nsubcategory1(int index, ::google::protobuf::uint64 value);
  void add_nsubcategory1(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      nsubcategory1() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_nsubcategory1();

  // repeated uint64 nCategory2 = 42;
  int ncategory2_size() const;
  void clear_ncategory2();
  static const int kNCategory2FieldNumber = 42;
  ::google::protobuf::uint64 ncategory2(int index) const;
  void set_ncategory2(int index, ::google::protobuf::uint64 value);
  void add_ncategory2(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ncategory2() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ncategory2();

  // repeated uint64 nSubCategory2 = 43;
  int nsubcategory2_size() const;
  void clear_nsubcategory2();
  static const int kNSubCategory2FieldNumber = 43;
  ::google::protobuf::uint64 nsubcategory2(int index) const;
  void set_nsubcategory2(int index, ::google::protobuf::uint64 value);
  void add_nsubcategory2(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      nsubcategory2() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_nsubcategory2();

  // string doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  const ::std::string& doc_id() const;
  void set_doc_id(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_id(::std::string&& value);
  #endif
  void set_doc_id(const char* value);
  void set_doc_id(const char* value, size_t size);
  ::std::string* mutable_doc_id();
  ::std::string* release_doc_id();
  void set_allocated_doc_id(::std::string* doc_id);

  // int64 ts = 2;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // int32 real_time_ctr = 3;
  void clear_real_time_ctr();
  static const int kRealTimeCtrFieldNumber = 3;
  ::google::protobuf::int32 real_time_ctr() const;
  void set_real_time_ctr(::google::protobuf::int32 value);

  // int32 total_ctr = 4;
  void clear_total_ctr();
  static const int kTotalCtrFieldNumber = 4;
  ::google::protobuf::int32 total_ctr() const;
  void set_total_ctr(::google::protobuf::int32 value);

  // int32 quality = 5;
  void clear_quality();
  static const int kQualityFieldNumber = 5;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // int32 title_length = 6;
  void clear_title_length();
  static const int kTitleLengthFieldNumber = 6;
  ::google::protobuf::int32 title_length() const;
  void set_title_length(::google::protobuf::int32 value);

  // uint64 source = 8;
  void clear_source();
  static const int kSourceFieldNumber = 8;
  ::google::protobuf::uint64 source() const;
  void set_source(::google::protobuf::uint64 value);

  // double chi_square_value = 9;
  void clear_chi_square_value();
  static const int kChiSquareValueFieldNumber = 9;
  double chi_square_value() const;
  void set_chi_square_value(double value);

  // int32 image_num = 7;
  void clear_image_num();
  static const int kImageNumFieldNumber = 7;
  ::google::protobuf::int32 image_num() const;
  void set_image_num(::google::protobuf::int32 value);

  // int32 static_quality = 12;
  void clear_static_quality();
  static const int kStaticQualityFieldNumber = 12;
  ::google::protobuf::int32 static_quality() const;
  void set_static_quality(::google::protobuf::int32 value);

  // double chi_square_value_hour = 10;
  void clear_chi_square_value_hour();
  static const int kChiSquareValueHourFieldNumber = 10;
  double chi_square_value_hour() const;
  void set_chi_square_value_hour(double value);

  // double news_rank = 11;
  void clear_news_rank();
  static const int kNewsRankFieldNumber = 11;
  double news_rank() const;
  void set_news_rank(double value);

  // int32 body_length = 26;
  void clear_body_length();
  static const int kBodyLengthFieldNumber = 26;
  ::google::protobuf::int32 body_length() const;
  void set_body_length(::google::protobuf::int32 value);

  // int32 img_size = 28;
  void clear_img_size();
  static const int kImgSizeFieldNumber = 28;
  ::google::protobuf::int32 img_size() const;
  void set_img_size(::google::protobuf::int32 value);

  // double avg_duration = 30;
  void clear_avg_duration();
  static const int kAvgDurationFieldNumber = 30;
  double avg_duration() const;
  void set_avg_duration(double value);

  // int32 commend_count = 29;
  void clear_commend_count();
  static const int kCommendCountFieldNumber = 29;
  ::google::protobuf::int32 commend_count() const;
  void set_commend_count(::google::protobuf::int32 value);

  // int32 have_gif = 31;
  void clear_have_gif();
  static const int kHaveGifFieldNumber = 31;
  ::google::protobuf::int32 have_gif() const;
  void set_have_gif(::google::protobuf::int32 value);

  // double real_avg_duration = 32;
  void clear_real_avg_duration();
  static const int kRealAvgDurationFieldNumber = 32;
  double real_avg_duration() const;
  void set_real_avg_duration(double value);

  // double item_duration = 33;
  void clear_item_duration();
  static const int kItemDurationFieldNumber = 33;
  double item_duration() const;
  void set_item_duration(double value);

  // uint64 author_name = 35;
  void clear_author_name();
  static const int kAuthorNameFieldNumber = 35;
  ::google::protobuf::uint64 author_name() const;
  void set_author_name(::google::protobuf::uint64 value);

  // int32 upCount = 34;
  void clear_upcount();
  static const int kUpCountFieldNumber = 34;
  ::google::protobuf::int32 upcount() const;
  void set_upcount(::google::protobuf::int32 value);

  // int32 copyrank = 36;
  void clear_copyrank();
  static const int kCopyrankFieldNumber = 36;
  ::google::protobuf::int32 copyrank() const;
  void set_copyrank(::google::protobuf::int32 value);

  // int32 pctrBscore = 54;
  void clear_pctrbscore();
  static const int kPctrBscoreFieldNumber = 54;
  ::google::protobuf::int32 pctrbscore() const;
  void set_pctrbscore(::google::protobuf::int32 value);

  // int32 pornrank = 37;
  void clear_pornrank();
  static const int kPornrankFieldNumber = 37;
  ::google::protobuf::int32 pornrank() const;
  void set_pornrank(::google::protobuf::int32 value);

  // int32 position = 52;
  void clear_position();
  static const int kPositionFieldNumber = 52;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // uint64 candidate_key = 50;
  void clear_candidate_key();
  static const int kCandidateKeyFieldNumber = 50;
  ::google::protobuf::uint64 candidate_key() const;
  void set_candidate_key(::google::protobuf::uint64 value);

  // uint64 rank_queue = 51;
  void clear_rank_queue();
  static const int kRankQueueFieldNumber = 51;
  ::google::protobuf::uint64 rank_queue() const;
  void set_rank_queue(::google::protobuf::uint64 value);

  // uint64 item_type = 53;
  void clear_item_type();
  static const int kItemTypeFieldNumber = 53;
  ::google::protobuf::uint64 item_type() const;
  void set_item_type(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.ItemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tags_;
  mutable int _tags_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > category_;
  mutable int _category_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > subcategories_;
  mutable int _subcategories_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > locations_;
  mutable int _locations_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lbs_locations_;
  mutable int _lbs_locations_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      ItemInfo_LdaVectorEntry_DoNotUse,
      ::google::protobuf::uint64, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > lda_vector_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > body_tags_;
  mutable int _body_tags_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      ItemInfo_ClarityEntry_DoNotUse,
      ::google::protobuf::uint64, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > clarity_;
  ::google::protobuf::internal::MapField<
      ItemInfo_BlackBolderEntry_DoNotUse,
      ::google::protobuf::uint64, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > blackbolder_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ncategory1_;
  mutable int _ncategory1_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > nsubcategory1_;
  mutable int _nsubcategory1_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ncategory2_;
  mutable int _ncategory2_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > nsubcategory2_;
  mutable int _nsubcategory2_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr doc_id_;
  ::google::protobuf::int64 ts_;
  ::google::protobuf::int32 real_time_ctr_;
  ::google::protobuf::int32 total_ctr_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 title_length_;
  ::google::protobuf::uint64 source_;
  double chi_square_value_;
  ::google::protobuf::int32 image_num_;
  ::google::protobuf::int32 static_quality_;
  double chi_square_value_hour_;
  double news_rank_;
  ::google::protobuf::int32 body_length_;
  ::google::protobuf::int32 img_size_;
  double avg_duration_;
  ::google::protobuf::int32 commend_count_;
  ::google::protobuf::int32 have_gif_;
  double real_avg_duration_;
  double item_duration_;
  ::google::protobuf::uint64 author_name_;
  ::google::protobuf::int32 upcount_;
  ::google::protobuf::int32 copyrank_;
  ::google::protobuf::int32 pctrbscore_;
  ::google::protobuf::int32 pornrank_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::uint64 candidate_key_;
  ::google::protobuf::uint64 rank_queue_;
  ::google::protobuf::uint64 item_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsItemInfoImpl();
};
// -------------------------------------------------------------------

class ItemInfoOrigin_LdaVectorEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ItemInfoOrigin_LdaVectorEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ItemInfoOrigin_LdaVectorEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  ItemInfoOrigin_LdaVectorEntry_DoNotUse();
  ItemInfoOrigin_LdaVectorEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ItemInfoOrigin_LdaVectorEntry_DoNotUse& other);
  static const ItemInfoOrigin_LdaVectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ItemInfoOrigin_LdaVectorEntry_DoNotUse*>(&_ItemInfoOrigin_LdaVectorEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ItemInfoOrigin_ClarityEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ItemInfoOrigin_ClarityEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ItemInfoOrigin_ClarityEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  ItemInfoOrigin_ClarityEntry_DoNotUse();
  ItemInfoOrigin_ClarityEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ItemInfoOrigin_ClarityEntry_DoNotUse& other);
  static const ItemInfoOrigin_ClarityEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ItemInfoOrigin_ClarityEntry_DoNotUse*>(&_ItemInfoOrigin_ClarityEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ItemInfoOrigin_BlackBolderEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ItemInfoOrigin_BlackBolderEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ItemInfoOrigin_BlackBolderEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  ItemInfoOrigin_BlackBolderEntry_DoNotUse();
  ItemInfoOrigin_BlackBolderEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ItemInfoOrigin_BlackBolderEntry_DoNotUse& other);
  static const ItemInfoOrigin_BlackBolderEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ItemInfoOrigin_BlackBolderEntry_DoNotUse*>(&_ItemInfoOrigin_BlackBolderEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ItemInfoOrigin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.ItemInfoOrigin) */ {
 public:
  ItemInfoOrigin();
  virtual ~ItemInfoOrigin();

  ItemInfoOrigin(const ItemInfoOrigin& from);

  inline ItemInfoOrigin& operator=(const ItemInfoOrigin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemInfoOrigin(ItemInfoOrigin&& from) noexcept
    : ItemInfoOrigin() {
    *this = ::std::move(from);
  }

  inline ItemInfoOrigin& operator=(ItemInfoOrigin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfoOrigin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemInfoOrigin* internal_default_instance() {
    return reinterpret_cast<const ItemInfoOrigin*>(
               &_ItemInfoOrigin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ItemInfoOrigin* other);
  friend void swap(ItemInfoOrigin& a, ItemInfoOrigin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemInfoOrigin* New() const PROTOBUF_FINAL { return New(NULL); }

  ItemInfoOrigin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ItemInfoOrigin& from);
  void MergeFrom(const ItemInfoOrigin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ItemInfoOrigin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string tags = 20;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 20;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated string category = 21;
  int category_size() const;
  void clear_category();
  static const int kCategoryFieldNumber = 21;
  const ::std::string& category(int index) const;
  ::std::string* mutable_category(int index);
  void set_category(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_category(int index, ::std::string&& value);
  #endif
  void set_category(int index, const char* value);
  void set_category(int index, const char* value, size_t size);
  ::std::string* add_category();
  void add_category(const ::std::string& value);
  #if LANG_CXX11
  void add_category(::std::string&& value);
  #endif
  void add_category(const char* value);
  void add_category(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& category() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_category();

  // repeated string subcategories = 22;
  int subcategories_size() const;
  void clear_subcategories();
  static const int kSubcategoriesFieldNumber = 22;
  const ::std::string& subcategories(int index) const;
  ::std::string* mutable_subcategories(int index);
  void set_subcategories(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subcategories(int index, ::std::string&& value);
  #endif
  void set_subcategories(int index, const char* value);
  void set_subcategories(int index, const char* value, size_t size);
  ::std::string* add_subcategories();
  void add_subcategories(const ::std::string& value);
  #if LANG_CXX11
  void add_subcategories(::std::string&& value);
  #endif
  void add_subcategories(const char* value);
  void add_subcategories(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subcategories() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subcategories();

  // repeated string locations = 23;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 23;
  const ::std::string& locations(int index) const;
  ::std::string* mutable_locations(int index);
  void set_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locations(int index, ::std::string&& value);
  #endif
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  ::std::string* add_locations();
  void add_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_locations(::std::string&& value);
  #endif
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_locations();

  // repeated string lbs_locations = 24;
  int lbs_locations_size() const;
  void clear_lbs_locations();
  static const int kLbsLocationsFieldNumber = 24;
  const ::std::string& lbs_locations(int index) const;
  ::std::string* mutable_lbs_locations(int index);
  void set_lbs_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lbs_locations(int index, ::std::string&& value);
  #endif
  void set_lbs_locations(int index, const char* value);
  void set_lbs_locations(int index, const char* value, size_t size);
  ::std::string* add_lbs_locations();
  void add_lbs_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_lbs_locations(::std::string&& value);
  #endif
  void add_lbs_locations(const char* value);
  void add_lbs_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lbs_locations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lbs_locations();

  // map<string, double> lda_vector = 25;
  int lda_vector_size() const;
  void clear_lda_vector();
  static const int kLdaVectorFieldNumber = 25;
  const ::google::protobuf::Map< ::std::string, double >&
      lda_vector() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_lda_vector();

  // repeated string body_tags = 27;
  int body_tags_size() const;
  void clear_body_tags();
  static const int kBodyTagsFieldNumber = 27;
  const ::std::string& body_tags(int index) const;
  ::std::string* mutable_body_tags(int index);
  void set_body_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_body_tags(int index, ::std::string&& value);
  #endif
  void set_body_tags(int index, const char* value);
  void set_body_tags(int index, const char* value, size_t size);
  ::std::string* add_body_tags();
  void add_body_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_body_tags(::std::string&& value);
  #endif
  void add_body_tags(const char* value);
  void add_body_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& body_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_body_tags();

  // map<string, double> clarity = 38;
  int clarity_size() const;
  void clear_clarity();
  static const int kClarityFieldNumber = 38;
  const ::google::protobuf::Map< ::std::string, double >&
      clarity() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_clarity();

  // map<string, double> blackBolder = 39;
  int blackbolder_size() const;
  void clear_blackbolder();
  static const int kBlackBolderFieldNumber = 39;
  const ::google::protobuf::Map< ::std::string, double >&
      blackbolder() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_blackbolder();

  // repeated string nCategory1 = 40;
  int ncategory1_size() const;
  void clear_ncategory1();
  static const int kNCategory1FieldNumber = 40;
  const ::std::string& ncategory1(int index) const;
  ::std::string* mutable_ncategory1(int index);
  void set_ncategory1(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ncategory1(int index, ::std::string&& value);
  #endif
  void set_ncategory1(int index, const char* value);
  void set_ncategory1(int index, const char* value, size_t size);
  ::std::string* add_ncategory1();
  void add_ncategory1(const ::std::string& value);
  #if LANG_CXX11
  void add_ncategory1(::std::string&& value);
  #endif
  void add_ncategory1(const char* value);
  void add_ncategory1(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ncategory1() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ncategory1();

  // repeated string nSubCategory1 = 41;
  int nsubcategory1_size() const;
  void clear_nsubcategory1();
  static const int kNSubCategory1FieldNumber = 41;
  const ::std::string& nsubcategory1(int index) const;
  ::std::string* mutable_nsubcategory1(int index);
  void set_nsubcategory1(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_nsubcategory1(int index, ::std::string&& value);
  #endif
  void set_nsubcategory1(int index, const char* value);
  void set_nsubcategory1(int index, const char* value, size_t size);
  ::std::string* add_nsubcategory1();
  void add_nsubcategory1(const ::std::string& value);
  #if LANG_CXX11
  void add_nsubcategory1(::std::string&& value);
  #endif
  void add_nsubcategory1(const char* value);
  void add_nsubcategory1(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nsubcategory1() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nsubcategory1();

  // repeated string nCategory2 = 42;
  int ncategory2_size() const;
  void clear_ncategory2();
  static const int kNCategory2FieldNumber = 42;
  const ::std::string& ncategory2(int index) const;
  ::std::string* mutable_ncategory2(int index);
  void set_ncategory2(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ncategory2(int index, ::std::string&& value);
  #endif
  void set_ncategory2(int index, const char* value);
  void set_ncategory2(int index, const char* value, size_t size);
  ::std::string* add_ncategory2();
  void add_ncategory2(const ::std::string& value);
  #if LANG_CXX11
  void add_ncategory2(::std::string&& value);
  #endif
  void add_ncategory2(const char* value);
  void add_ncategory2(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ncategory2() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ncategory2();

  // repeated string nSubCategory2 = 43;
  int nsubcategory2_size() const;
  void clear_nsubcategory2();
  static const int kNSubCategory2FieldNumber = 43;
  const ::std::string& nsubcategory2(int index) const;
  ::std::string* mutable_nsubcategory2(int index);
  void set_nsubcategory2(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_nsubcategory2(int index, ::std::string&& value);
  #endif
  void set_nsubcategory2(int index, const char* value);
  void set_nsubcategory2(int index, const char* value, size_t size);
  ::std::string* add_nsubcategory2();
  void add_nsubcategory2(const ::std::string& value);
  #if LANG_CXX11
  void add_nsubcategory2(::std::string&& value);
  #endif
  void add_nsubcategory2(const char* value);
  void add_nsubcategory2(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nsubcategory2() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nsubcategory2();

  // string doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  const ::std::string& doc_id() const;
  void set_doc_id(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_id(::std::string&& value);
  #endif
  void set_doc_id(const char* value);
  void set_doc_id(const char* value, size_t size);
  ::std::string* mutable_doc_id();
  ::std::string* release_doc_id();
  void set_allocated_doc_id(::std::string* doc_id);

  // string source = 8;
  void clear_source();
  static const int kSourceFieldNumber = 8;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string author_name = 35;
  void clear_author_name();
  static const int kAuthorNameFieldNumber = 35;
  const ::std::string& author_name() const;
  void set_author_name(const ::std::string& value);
  #if LANG_CXX11
  void set_author_name(::std::string&& value);
  #endif
  void set_author_name(const char* value);
  void set_author_name(const char* value, size_t size);
  ::std::string* mutable_author_name();
  ::std::string* release_author_name();
  void set_allocated_author_name(::std::string* author_name);

  // string candidate_key = 100;
  void clear_candidate_key();
  static const int kCandidateKeyFieldNumber = 100;
  const ::std::string& candidate_key() const;
  void set_candidate_key(const ::std::string& value);
  #if LANG_CXX11
  void set_candidate_key(::std::string&& value);
  #endif
  void set_candidate_key(const char* value);
  void set_candidate_key(const char* value, size_t size);
  ::std::string* mutable_candidate_key();
  ::std::string* release_candidate_key();
  void set_allocated_candidate_key(::std::string* candidate_key);

  // string rank_queue = 101;
  void clear_rank_queue();
  static const int kRankQueueFieldNumber = 101;
  const ::std::string& rank_queue() const;
  void set_rank_queue(const ::std::string& value);
  #if LANG_CXX11
  void set_rank_queue(::std::string&& value);
  #endif
  void set_rank_queue(const char* value);
  void set_rank_queue(const char* value, size_t size);
  ::std::string* mutable_rank_queue();
  ::std::string* release_rank_queue();
  void set_allocated_rank_queue(::std::string* rank_queue);

  // string item_type = 103;
  void clear_item_type();
  static const int kItemTypeFieldNumber = 103;
  const ::std::string& item_type() const;
  void set_item_type(const ::std::string& value);
  #if LANG_CXX11
  void set_item_type(::std::string&& value);
  #endif
  void set_item_type(const char* value);
  void set_item_type(const char* value, size_t size);
  ::std::string* mutable_item_type();
  ::std::string* release_item_type();
  void set_allocated_item_type(::std::string* item_type);

  // int64 ts = 2;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // int32 real_time_ctr = 3;
  void clear_real_time_ctr();
  static const int kRealTimeCtrFieldNumber = 3;
  ::google::protobuf::int32 real_time_ctr() const;
  void set_real_time_ctr(::google::protobuf::int32 value);

  // int32 total_ctr = 4;
  void clear_total_ctr();
  static const int kTotalCtrFieldNumber = 4;
  ::google::protobuf::int32 total_ctr() const;
  void set_total_ctr(::google::protobuf::int32 value);

  // int32 quality = 5;
  void clear_quality();
  static const int kQualityFieldNumber = 5;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // int32 title_length = 6;
  void clear_title_length();
  static const int kTitleLengthFieldNumber = 6;
  ::google::protobuf::int32 title_length() const;
  void set_title_length(::google::protobuf::int32 value);

  // double chi_square_value = 9;
  void clear_chi_square_value();
  static const int kChiSquareValueFieldNumber = 9;
  double chi_square_value() const;
  void set_chi_square_value(double value);

  // int32 image_num = 7;
  void clear_image_num();
  static const int kImageNumFieldNumber = 7;
  ::google::protobuf::int32 image_num() const;
  void set_image_num(::google::protobuf::int32 value);

  // int32 static_quality = 12;
  void clear_static_quality();
  static const int kStaticQualityFieldNumber = 12;
  ::google::protobuf::int32 static_quality() const;
  void set_static_quality(::google::protobuf::int32 value);

  // double chi_square_value_hour = 10;
  void clear_chi_square_value_hour();
  static const int kChiSquareValueHourFieldNumber = 10;
  double chi_square_value_hour() const;
  void set_chi_square_value_hour(double value);

  // double news_rank = 11;
  void clear_news_rank();
  static const int kNewsRankFieldNumber = 11;
  double news_rank() const;
  void set_news_rank(double value);

  // int32 body_length = 26;
  void clear_body_length();
  static const int kBodyLengthFieldNumber = 26;
  ::google::protobuf::int32 body_length() const;
  void set_body_length(::google::protobuf::int32 value);

  // int32 img_size = 28;
  void clear_img_size();
  static const int kImgSizeFieldNumber = 28;
  ::google::protobuf::int32 img_size() const;
  void set_img_size(::google::protobuf::int32 value);

  // double avg_duration = 30;
  void clear_avg_duration();
  static const int kAvgDurationFieldNumber = 30;
  double avg_duration() const;
  void set_avg_duration(double value);

  // int32 commend_count = 29;
  void clear_commend_count();
  static const int kCommendCountFieldNumber = 29;
  ::google::protobuf::int32 commend_count() const;
  void set_commend_count(::google::protobuf::int32 value);

  // int32 have_gif = 31;
  void clear_have_gif();
  static const int kHaveGifFieldNumber = 31;
  ::google::protobuf::int32 have_gif() const;
  void set_have_gif(::google::protobuf::int32 value);

  // double real_avg_duration = 32;
  void clear_real_avg_duration();
  static const int kRealAvgDurationFieldNumber = 32;
  double real_avg_duration() const;
  void set_real_avg_duration(double value);

  // double item_duration = 33;
  void clear_item_duration();
  static const int kItemDurationFieldNumber = 33;
  double item_duration() const;
  void set_item_duration(double value);

  // int32 upCount = 34;
  void clear_upcount();
  static const int kUpCountFieldNumber = 34;
  ::google::protobuf::int32 upcount() const;
  void set_upcount(::google::protobuf::int32 value);

  // int32 copyrank = 36;
  void clear_copyrank();
  static const int kCopyrankFieldNumber = 36;
  ::google::protobuf::int32 copyrank() const;
  void set_copyrank(::google::protobuf::int32 value);

  // int32 pctrBscore = 104;
  void clear_pctrbscore();
  static const int kPctrBscoreFieldNumber = 104;
  ::google::protobuf::int32 pctrbscore() const;
  void set_pctrbscore(::google::protobuf::int32 value);

  // int32 pornrank = 37;
  void clear_pornrank();
  static const int kPornrankFieldNumber = 37;
  ::google::protobuf::int32 pornrank() const;
  void set_pornrank(::google::protobuf::int32 value);

  // int32 position = 102;
  void clear_position();
  static const int kPositionFieldNumber = 102;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.ItemInfoOrigin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> category_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subcategories_;
  ::google::protobuf::RepeatedPtrField< ::std::string> locations_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lbs_locations_;
  ::google::protobuf::internal::MapField<
      ItemInfoOrigin_LdaVectorEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > lda_vector_;
  ::google::protobuf::RepeatedPtrField< ::std::string> body_tags_;
  ::google::protobuf::internal::MapField<
      ItemInfoOrigin_ClarityEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > clarity_;
  ::google::protobuf::internal::MapField<
      ItemInfoOrigin_BlackBolderEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > blackbolder_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ncategory1_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nsubcategory1_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ncategory2_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nsubcategory2_;
  ::google::protobuf::internal::ArenaStringPtr doc_id_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr author_name_;
  ::google::protobuf::internal::ArenaStringPtr candidate_key_;
  ::google::protobuf::internal::ArenaStringPtr rank_queue_;
  ::google::protobuf::internal::ArenaStringPtr item_type_;
  ::google::protobuf::int64 ts_;
  ::google::protobuf::int32 real_time_ctr_;
  ::google::protobuf::int32 total_ctr_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 title_length_;
  double chi_square_value_;
  ::google::protobuf::int32 image_num_;
  ::google::protobuf::int32 static_quality_;
  double chi_square_value_hour_;
  double news_rank_;
  ::google::protobuf::int32 body_length_;
  ::google::protobuf::int32 img_size_;
  double avg_duration_;
  ::google::protobuf::int32 commend_count_;
  ::google::protobuf::int32 have_gif_;
  double real_avg_duration_;
  double item_duration_;
  ::google::protobuf::int32 upcount_;
  ::google::protobuf::int32 copyrank_;
  ::google::protobuf::int32 pctrbscore_;
  ::google::protobuf::int32 pornrank_;
  ::google::protobuf::int32 position_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsItemInfoOriginImpl();
};
// -------------------------------------------------------------------

class ItemInfoList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:predictor.feature.framework.ItemInfoList) */ {
 public:
  ItemInfoList();
  virtual ~ItemInfoList();

  ItemInfoList(const ItemInfoList& from);

  inline ItemInfoList& operator=(const ItemInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemInfoList(ItemInfoList&& from) noexcept
    : ItemInfoList() {
    *this = ::std::move(from);
  }

  inline ItemInfoList& operator=(ItemInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemInfoList* internal_default_instance() {
    return reinterpret_cast<const ItemInfoList*>(
               &_ItemInfoList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ItemInfoList* other);
  friend void swap(ItemInfoList& a, ItemInfoList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemInfoList* New() const PROTOBUF_FINAL { return New(NULL); }

  ItemInfoList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ItemInfoList& from);
  void MergeFrom(const ItemInfoList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ItemInfoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .predictor.feature.framework.ItemInfo item_info_list = 1;
  int item_info_list_size() const;
  void clear_item_info_list();
  static const int kItemInfoListFieldNumber = 1;
  const ::predictor::feature::framework::ItemInfo& item_info_list(int index) const;
  ::predictor::feature::framework::ItemInfo* mutable_item_info_list(int index);
  ::predictor::feature::framework::ItemInfo* add_item_info_list();
  ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfo >*
      mutable_item_info_list();
  const ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfo >&
      item_info_list() const;

  // repeated .predictor.feature.framework.ItemInfoOrigin item_info_origin_list = 10;
  int item_info_origin_list_size() const;
  void clear_item_info_origin_list();
  static const int kItemInfoOriginListFieldNumber = 10;
  const ::predictor::feature::framework::ItemInfoOrigin& item_info_origin_list(int index) const;
  ::predictor::feature::framework::ItemInfoOrigin* mutable_item_info_origin_list(int index);
  ::predictor::feature::framework::ItemInfoOrigin* add_item_info_origin_list();
  ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfoOrigin >*
      mutable_item_info_origin_list();
  const ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfoOrigin >&
      item_info_origin_list() const;

  // @@protoc_insertion_point(class_scope:predictor.feature.framework.ItemInfoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfo > item_info_list_;
  ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfoOrigin > item_info_origin_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_feature_2eproto::TableStruct;
  friend void ::protobuf_feature_2eproto::InitDefaultsItemInfoListImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseFeatureUnit

// uint64 gkey = 1;
inline void BaseFeatureUnit::clear_gkey() {
  gkey_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BaseFeatureUnit::gkey() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.gkey)
  return gkey_;
}
inline void BaseFeatureUnit::set_gkey(::google::protobuf::uint64 value) {
  
  gkey_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.gkey)
}

// uint64 ukey = 2;
inline void BaseFeatureUnit::clear_ukey() {
  ukey_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BaseFeatureUnit::ukey() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.ukey)
  return ukey_;
}
inline void BaseFeatureUnit::set_ukey(::google::protobuf::uint64 value) {
  
  ukey_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.ukey)
}

// uint64 dkey = 3;
inline void BaseFeatureUnit::clear_dkey() {
  dkey_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BaseFeatureUnit::dkey() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.dkey)
  return dkey_;
}
inline void BaseFeatureUnit::set_dkey(::google::protobuf::uint64 value) {
  
  dkey_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.dkey)
}

// uint64 identifier = 4;
inline void BaseFeatureUnit::clear_identifier() {
  identifier_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BaseFeatureUnit::identifier() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.identifier)
  return identifier_;
}
inline void BaseFeatureUnit::set_identifier(::google::protobuf::uint64 value) {
  
  identifier_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.identifier)
}

// double value = 5;
inline void BaseFeatureUnit::clear_value() {
  value_ = 0;
}
inline double BaseFeatureUnit::value() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.value)
  return value_;
}
inline void BaseFeatureUnit::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.value)
}

// string sub_group_name = 20;
inline void BaseFeatureUnit::clear_sub_group_name() {
  sub_group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseFeatureUnit::sub_group_name() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.sub_group_name)
  return sub_group_name_.GetNoArena();
}
inline void BaseFeatureUnit::set_sub_group_name(const ::std::string& value) {
  
  sub_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.sub_group_name)
}
#if LANG_CXX11
inline void BaseFeatureUnit::set_sub_group_name(::std::string&& value) {
  
  sub_group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.BaseFeatureUnit.sub_group_name)
}
#endif
inline void BaseFeatureUnit::set_sub_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sub_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.BaseFeatureUnit.sub_group_name)
}
inline void BaseFeatureUnit::set_sub_group_name(const char* value, size_t size) {
  
  sub_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.BaseFeatureUnit.sub_group_name)
}
inline ::std::string* BaseFeatureUnit::mutable_sub_group_name() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.BaseFeatureUnit.sub_group_name)
  return sub_group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseFeatureUnit::release_sub_group_name() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.BaseFeatureUnit.sub_group_name)
  
  return sub_group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseFeatureUnit::set_allocated_sub_group_name(::std::string* sub_group_name) {
  if (sub_group_name != NULL) {
    
  } else {
    
  }
  sub_group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_group_name);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.BaseFeatureUnit.sub_group_name)
}

// string u_value = 21;
inline void BaseFeatureUnit::clear_u_value() {
  u_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseFeatureUnit::u_value() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.u_value)
  return u_value_.GetNoArena();
}
inline void BaseFeatureUnit::set_u_value(const ::std::string& value) {
  
  u_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.u_value)
}
#if LANG_CXX11
inline void BaseFeatureUnit::set_u_value(::std::string&& value) {
  
  u_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.BaseFeatureUnit.u_value)
}
#endif
inline void BaseFeatureUnit::set_u_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  u_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.BaseFeatureUnit.u_value)
}
inline void BaseFeatureUnit::set_u_value(const char* value, size_t size) {
  
  u_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.BaseFeatureUnit.u_value)
}
inline ::std::string* BaseFeatureUnit::mutable_u_value() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.BaseFeatureUnit.u_value)
  return u_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseFeatureUnit::release_u_value() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.BaseFeatureUnit.u_value)
  
  return u_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseFeatureUnit::set_allocated_u_value(::std::string* u_value) {
  if (u_value != NULL) {
    
  } else {
    
  }
  u_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), u_value);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.BaseFeatureUnit.u_value)
}

// string d_value = 22;
inline void BaseFeatureUnit::clear_d_value() {
  d_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseFeatureUnit::d_value() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.d_value)
  return d_value_.GetNoArena();
}
inline void BaseFeatureUnit::set_d_value(const ::std::string& value) {
  
  d_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.d_value)
}
#if LANG_CXX11
inline void BaseFeatureUnit::set_d_value(::std::string&& value) {
  
  d_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.BaseFeatureUnit.d_value)
}
#endif
inline void BaseFeatureUnit::set_d_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  d_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.BaseFeatureUnit.d_value)
}
inline void BaseFeatureUnit::set_d_value(const char* value, size_t size) {
  
  d_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.BaseFeatureUnit.d_value)
}
inline ::std::string* BaseFeatureUnit::mutable_d_value() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.BaseFeatureUnit.d_value)
  return d_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseFeatureUnit::release_d_value() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.BaseFeatureUnit.d_value)
  
  return d_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseFeatureUnit::set_allocated_d_value(::std::string* d_value) {
  if (d_value != NULL) {
    
  } else {
    
  }
  d_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), d_value);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.BaseFeatureUnit.d_value)
}

// string fea = 23;
inline void BaseFeatureUnit::clear_fea() {
  fea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseFeatureUnit::fea() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.BaseFeatureUnit.fea)
  return fea_.GetNoArena();
}
inline void BaseFeatureUnit::set_fea(const ::std::string& value) {
  
  fea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.BaseFeatureUnit.fea)
}
#if LANG_CXX11
inline void BaseFeatureUnit::set_fea(::std::string&& value) {
  
  fea_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.BaseFeatureUnit.fea)
}
#endif
inline void BaseFeatureUnit::set_fea(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.BaseFeatureUnit.fea)
}
inline void BaseFeatureUnit::set_fea(const char* value, size_t size) {
  
  fea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.BaseFeatureUnit.fea)
}
inline ::std::string* BaseFeatureUnit::mutable_fea() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.BaseFeatureUnit.fea)
  return fea_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseFeatureUnit::release_fea() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.BaseFeatureUnit.fea)
  
  return fea_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseFeatureUnit::set_allocated_fea(::std::string* fea) {
  if (fea != NULL) {
    
  } else {
    
  }
  fea_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fea);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.BaseFeatureUnit.fea)
}

// -------------------------------------------------------------------

// FeatureUnit

// uint64 gkey = 1;
inline void FeatureUnit::clear_gkey() {
  gkey_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FeatureUnit::gkey() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.FeatureUnit.gkey)
  return gkey_;
}
inline void FeatureUnit::set_gkey(::google::protobuf::uint64 value) {
  
  gkey_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.FeatureUnit.gkey)
}

// bool need_output = 2;
inline void FeatureUnit::clear_need_output() {
  need_output_ = false;
}
inline bool FeatureUnit::need_output() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.FeatureUnit.need_output)
  return need_output_;
}
inline void FeatureUnit::set_need_output(bool value) {
  
  need_output_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.FeatureUnit.need_output)
}

// int32 field = 3;
inline void FeatureUnit::clear_field() {
  field_ = 0;
}
inline ::google::protobuf::int32 FeatureUnit::field() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.FeatureUnit.field)
  return field_;
}
inline void FeatureUnit::set_field(::google::protobuf::int32 value) {
  
  field_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.FeatureUnit.field)
}

// int32 dnn_group = 4;
inline void FeatureUnit::clear_dnn_group() {
  dnn_group_ = 0;
}
inline ::google::protobuf::int32 FeatureUnit::dnn_group() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.FeatureUnit.dnn_group)
  return dnn_group_;
}
inline void FeatureUnit::set_dnn_group(::google::protobuf::int32 value) {
  
  dnn_group_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.FeatureUnit.dnn_group)
}

// repeated .predictor.feature.framework.BaseFeatureUnit base_feature_unit_vec = 5;
inline int FeatureUnit::base_feature_unit_vec_size() const {
  return base_feature_unit_vec_.size();
}
inline void FeatureUnit::clear_base_feature_unit_vec() {
  base_feature_unit_vec_.Clear();
}
inline const ::predictor::feature::framework::BaseFeatureUnit& FeatureUnit::base_feature_unit_vec(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.FeatureUnit.base_feature_unit_vec)
  return base_feature_unit_vec_.Get(index);
}
inline ::predictor::feature::framework::BaseFeatureUnit* FeatureUnit::mutable_base_feature_unit_vec(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.FeatureUnit.base_feature_unit_vec)
  return base_feature_unit_vec_.Mutable(index);
}
inline ::predictor::feature::framework::BaseFeatureUnit* FeatureUnit::add_base_feature_unit_vec() {
  // @@protoc_insertion_point(field_add:predictor.feature.framework.FeatureUnit.base_feature_unit_vec)
  return base_feature_unit_vec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::BaseFeatureUnit >*
FeatureUnit::mutable_base_feature_unit_vec() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.FeatureUnit.base_feature_unit_vec)
  return &base_feature_unit_vec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::BaseFeatureUnit >&
FeatureUnit::base_feature_unit_vec() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.FeatureUnit.base_feature_unit_vec)
  return base_feature_unit_vec_;
}

// string group_name = 20;
inline void FeatureUnit::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureUnit::group_name() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.FeatureUnit.group_name)
  return group_name_.GetNoArena();
}
inline void FeatureUnit::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.FeatureUnit.group_name)
}
#if LANG_CXX11
inline void FeatureUnit::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.FeatureUnit.group_name)
}
#endif
inline void FeatureUnit::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.FeatureUnit.group_name)
}
inline void FeatureUnit::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.FeatureUnit.group_name)
}
inline ::std::string* FeatureUnit::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.FeatureUnit.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureUnit::release_group_name() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.FeatureUnit.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureUnit::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.FeatureUnit.group_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FeatureUnitCollection

// map<uint64, .predictor.feature.framework.FeatureUnit> feature_unit_map = 1;
inline int FeatureUnitCollection::feature_unit_map_size() const {
  return feature_unit_map_.size();
}
inline void FeatureUnitCollection::clear_feature_unit_map() {
  feature_unit_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, ::predictor::feature::framework::FeatureUnit >&
FeatureUnitCollection::feature_unit_map() const {
  // @@protoc_insertion_point(field_map:predictor.feature.framework.FeatureUnitCollection.feature_unit_map)
  return feature_unit_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, ::predictor::feature::framework::FeatureUnit >*
FeatureUnitCollection::mutable_feature_unit_map() {
  // @@protoc_insertion_point(field_mutable_map:predictor.feature.framework.FeatureUnitCollection.feature_unit_map)
  return feature_unit_map_.MutableMap();
}

// -------------------------------------------------------------------

// DocFeatures

// string doc_id = 1;
inline void DocFeatures::clear_doc_id() {
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocFeatures::doc_id() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.DocFeatures.doc_id)
  return doc_id_.GetNoArena();
}
inline void DocFeatures::set_doc_id(const ::std::string& value) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.DocFeatures.doc_id)
}
#if LANG_CXX11
inline void DocFeatures::set_doc_id(::std::string&& value) {
  
  doc_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.DocFeatures.doc_id)
}
#endif
inline void DocFeatures::set_doc_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.DocFeatures.doc_id)
}
inline void DocFeatures::set_doc_id(const char* value, size_t size) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.DocFeatures.doc_id)
}
inline ::std::string* DocFeatures::mutable_doc_id() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.DocFeatures.doc_id)
  return doc_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocFeatures::release_doc_id() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.DocFeatures.doc_id)
  
  return doc_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocFeatures::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id != NULL) {
    
  } else {
    
  }
  doc_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_id);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.DocFeatures.doc_id)
}

// .predictor.feature.framework.FeatureUnitCollection feature_unit_collection = 2;
inline bool DocFeatures::has_feature_unit_collection() const {
  return this != internal_default_instance() && feature_unit_collection_ != NULL;
}
inline void DocFeatures::clear_feature_unit_collection() {
  if (GetArenaNoVirtual() == NULL && feature_unit_collection_ != NULL) {
    delete feature_unit_collection_;
  }
  feature_unit_collection_ = NULL;
}
inline const ::predictor::feature::framework::FeatureUnitCollection& DocFeatures::feature_unit_collection() const {
  const ::predictor::feature::framework::FeatureUnitCollection* p = feature_unit_collection_;
  // @@protoc_insertion_point(field_get:predictor.feature.framework.DocFeatures.feature_unit_collection)
  return p != NULL ? *p : *reinterpret_cast<const ::predictor::feature::framework::FeatureUnitCollection*>(
      &::predictor::feature::framework::_FeatureUnitCollection_default_instance_);
}
inline ::predictor::feature::framework::FeatureUnitCollection* DocFeatures::release_feature_unit_collection() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.DocFeatures.feature_unit_collection)
  
  ::predictor::feature::framework::FeatureUnitCollection* temp = feature_unit_collection_;
  feature_unit_collection_ = NULL;
  return temp;
}
inline ::predictor::feature::framework::FeatureUnitCollection* DocFeatures::mutable_feature_unit_collection() {
  
  if (feature_unit_collection_ == NULL) {
    feature_unit_collection_ = new ::predictor::feature::framework::FeatureUnitCollection;
  }
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.DocFeatures.feature_unit_collection)
  return feature_unit_collection_;
}
inline void DocFeatures::set_allocated_feature_unit_collection(::predictor::feature::framework::FeatureUnitCollection* feature_unit_collection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete feature_unit_collection_;
  }
  if (feature_unit_collection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      feature_unit_collection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feature_unit_collection, submessage_arena);
    }
    
  } else {
    
  }
  feature_unit_collection_ = feature_unit_collection;
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.DocFeatures.feature_unit_collection)
}

// -------------------------------------------------------------------

// DocFeaturesList

// repeated .predictor.feature.framework.DocFeatures doc_features_list = 1;
inline int DocFeaturesList::doc_features_list_size() const {
  return doc_features_list_.size();
}
inline void DocFeaturesList::clear_doc_features_list() {
  doc_features_list_.Clear();
}
inline const ::predictor::feature::framework::DocFeatures& DocFeaturesList::doc_features_list(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.DocFeaturesList.doc_features_list)
  return doc_features_list_.Get(index);
}
inline ::predictor::feature::framework::DocFeatures* DocFeaturesList::mutable_doc_features_list(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.DocFeaturesList.doc_features_list)
  return doc_features_list_.Mutable(index);
}
inline ::predictor::feature::framework::DocFeatures* DocFeaturesList::add_doc_features_list() {
  // @@protoc_insertion_point(field_add:predictor.feature.framework.DocFeaturesList.doc_features_list)
  return doc_features_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::DocFeatures >*
DocFeaturesList::mutable_doc_features_list() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.DocFeaturesList.doc_features_list)
  return &doc_features_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::DocFeatures >&
DocFeaturesList::doc_features_list() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.DocFeaturesList.doc_features_list)
  return doc_features_list_;
}

// -------------------------------------------------------------------

// FeatureInfo

// .predictor.feature.framework.FeatureUnitCollection common_feas = 1;
inline bool FeatureInfo::has_common_feas() const {
  return this != internal_default_instance() && common_feas_ != NULL;
}
inline void FeatureInfo::clear_common_feas() {
  if (GetArenaNoVirtual() == NULL && common_feas_ != NULL) {
    delete common_feas_;
  }
  common_feas_ = NULL;
}
inline const ::predictor::feature::framework::FeatureUnitCollection& FeatureInfo::common_feas() const {
  const ::predictor::feature::framework::FeatureUnitCollection* p = common_feas_;
  // @@protoc_insertion_point(field_get:predictor.feature.framework.FeatureInfo.common_feas)
  return p != NULL ? *p : *reinterpret_cast<const ::predictor::feature::framework::FeatureUnitCollection*>(
      &::predictor::feature::framework::_FeatureUnitCollection_default_instance_);
}
inline ::predictor::feature::framework::FeatureUnitCollection* FeatureInfo::release_common_feas() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.FeatureInfo.common_feas)
  
  ::predictor::feature::framework::FeatureUnitCollection* temp = common_feas_;
  common_feas_ = NULL;
  return temp;
}
inline ::predictor::feature::framework::FeatureUnitCollection* FeatureInfo::mutable_common_feas() {
  
  if (common_feas_ == NULL) {
    common_feas_ = new ::predictor::feature::framework::FeatureUnitCollection;
  }
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.FeatureInfo.common_feas)
  return common_feas_;
}
inline void FeatureInfo::set_allocated_common_feas(::predictor::feature::framework::FeatureUnitCollection* common_feas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete common_feas_;
  }
  if (common_feas) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      common_feas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, common_feas, submessage_arena);
    }
    
  } else {
    
  }
  common_feas_ = common_feas;
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.FeatureInfo.common_feas)
}

// .predictor.feature.framework.DocFeaturesList doc_features_list = 2;
inline bool FeatureInfo::has_doc_features_list() const {
  return this != internal_default_instance() && doc_features_list_ != NULL;
}
inline void FeatureInfo::clear_doc_features_list() {
  if (GetArenaNoVirtual() == NULL && doc_features_list_ != NULL) {
    delete doc_features_list_;
  }
  doc_features_list_ = NULL;
}
inline const ::predictor::feature::framework::DocFeaturesList& FeatureInfo::doc_features_list() const {
  const ::predictor::feature::framework::DocFeaturesList* p = doc_features_list_;
  // @@protoc_insertion_point(field_get:predictor.feature.framework.FeatureInfo.doc_features_list)
  return p != NULL ? *p : *reinterpret_cast<const ::predictor::feature::framework::DocFeaturesList*>(
      &::predictor::feature::framework::_DocFeaturesList_default_instance_);
}
inline ::predictor::feature::framework::DocFeaturesList* FeatureInfo::release_doc_features_list() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.FeatureInfo.doc_features_list)
  
  ::predictor::feature::framework::DocFeaturesList* temp = doc_features_list_;
  doc_features_list_ = NULL;
  return temp;
}
inline ::predictor::feature::framework::DocFeaturesList* FeatureInfo::mutable_doc_features_list() {
  
  if (doc_features_list_ == NULL) {
    doc_features_list_ = new ::predictor::feature::framework::DocFeaturesList;
  }
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.FeatureInfo.doc_features_list)
  return doc_features_list_;
}
inline void FeatureInfo::set_allocated_doc_features_list(::predictor::feature::framework::DocFeaturesList* doc_features_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_features_list_;
  }
  if (doc_features_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      doc_features_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, doc_features_list, submessage_arena);
    }
    
  } else {
    
  }
  doc_features_list_ = doc_features_list;
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.FeatureInfo.doc_features_list)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ItemInfo

// string doc_id = 1;
inline void ItemInfo::clear_doc_id() {
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemInfo::doc_id() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.doc_id)
  return doc_id_.GetNoArena();
}
inline void ItemInfo::set_doc_id(const ::std::string& value) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.doc_id)
}
#if LANG_CXX11
inline void ItemInfo::set_doc_id(::std::string&& value) {
  
  doc_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.ItemInfo.doc_id)
}
#endif
inline void ItemInfo::set_doc_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfo.doc_id)
}
inline void ItemInfo::set_doc_id(const char* value, size_t size) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfo.doc_id)
}
inline ::std::string* ItemInfo::mutable_doc_id() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfo.doc_id)
  return doc_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemInfo::release_doc_id() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.ItemInfo.doc_id)
  
  return doc_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfo::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id != NULL) {
    
  } else {
    
  }
  doc_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_id);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.ItemInfo.doc_id)
}

// int64 ts = 2;
inline void ItemInfo::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ItemInfo::ts() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.ts)
  return ts_;
}
inline void ItemInfo::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.ts)
}

// int32 real_time_ctr = 3;
inline void ItemInfo::clear_real_time_ctr() {
  real_time_ctr_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::real_time_ctr() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.real_time_ctr)
  return real_time_ctr_;
}
inline void ItemInfo::set_real_time_ctr(::google::protobuf::int32 value) {
  
  real_time_ctr_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.real_time_ctr)
}

// int32 total_ctr = 4;
inline void ItemInfo::clear_total_ctr() {
  total_ctr_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::total_ctr() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.total_ctr)
  return total_ctr_;
}
inline void ItemInfo::set_total_ctr(::google::protobuf::int32 value) {
  
  total_ctr_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.total_ctr)
}

// int32 quality = 5;
inline void ItemInfo::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::quality() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.quality)
  return quality_;
}
inline void ItemInfo::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.quality)
}

// int32 title_length = 6;
inline void ItemInfo::clear_title_length() {
  title_length_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::title_length() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.title_length)
  return title_length_;
}
inline void ItemInfo::set_title_length(::google::protobuf::int32 value) {
  
  title_length_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.title_length)
}

// int32 image_num = 7;
inline void ItemInfo::clear_image_num() {
  image_num_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::image_num() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.image_num)
  return image_num_;
}
inline void ItemInfo::set_image_num(::google::protobuf::int32 value) {
  
  image_num_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.image_num)
}

// uint64 source = 8;
inline void ItemInfo::clear_source() {
  source_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ItemInfo::source() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.source)
  return source_;
}
inline void ItemInfo::set_source(::google::protobuf::uint64 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.source)
}

// double chi_square_value = 9;
inline void ItemInfo::clear_chi_square_value() {
  chi_square_value_ = 0;
}
inline double ItemInfo::chi_square_value() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.chi_square_value)
  return chi_square_value_;
}
inline void ItemInfo::set_chi_square_value(double value) {
  
  chi_square_value_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.chi_square_value)
}

// double chi_square_value_hour = 10;
inline void ItemInfo::clear_chi_square_value_hour() {
  chi_square_value_hour_ = 0;
}
inline double ItemInfo::chi_square_value_hour() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.chi_square_value_hour)
  return chi_square_value_hour_;
}
inline void ItemInfo::set_chi_square_value_hour(double value) {
  
  chi_square_value_hour_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.chi_square_value_hour)
}

// double news_rank = 11;
inline void ItemInfo::clear_news_rank() {
  news_rank_ = 0;
}
inline double ItemInfo::news_rank() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.news_rank)
  return news_rank_;
}
inline void ItemInfo::set_news_rank(double value) {
  
  news_rank_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.news_rank)
}

// int32 static_quality = 12;
inline void ItemInfo::clear_static_quality() {
  static_quality_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::static_quality() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.static_quality)
  return static_quality_;
}
inline void ItemInfo::set_static_quality(::google::protobuf::int32 value) {
  
  static_quality_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.static_quality)
}

// repeated uint64 tags = 20;
inline int ItemInfo::tags_size() const {
  return tags_.size();
}
inline void ItemInfo::clear_tags() {
  tags_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.tags)
  return tags_.Get(index);
}
inline void ItemInfo::set_tags(int index, ::google::protobuf::uint64 value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.tags)
}
inline void ItemInfo::add_tags(::google::protobuf::uint64 value) {
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.tags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::tags() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.tags)
  return &tags_;
}

// repeated uint64 category = 21;
inline int ItemInfo::category_size() const {
  return category_.size();
}
inline void ItemInfo::clear_category() {
  category_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::category(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.category)
  return category_.Get(index);
}
inline void ItemInfo::set_category(int index, ::google::protobuf::uint64 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.category)
}
inline void ItemInfo::add_category(::google::protobuf::uint64 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::category() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.category)
  return category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.category)
  return &category_;
}

// repeated uint64 subcategories = 22;
inline int ItemInfo::subcategories_size() const {
  return subcategories_.size();
}
inline void ItemInfo::clear_subcategories() {
  subcategories_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::subcategories(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.subcategories)
  return subcategories_.Get(index);
}
inline void ItemInfo::set_subcategories(int index, ::google::protobuf::uint64 value) {
  subcategories_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.subcategories)
}
inline void ItemInfo::add_subcategories(::google::protobuf::uint64 value) {
  subcategories_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.subcategories)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::subcategories() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.subcategories)
  return subcategories_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_subcategories() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.subcategories)
  return &subcategories_;
}

// repeated uint64 locations = 23;
inline int ItemInfo::locations_size() const {
  return locations_.size();
}
inline void ItemInfo::clear_locations() {
  locations_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::locations(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.locations)
  return locations_.Get(index);
}
inline void ItemInfo::set_locations(int index, ::google::protobuf::uint64 value) {
  locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.locations)
}
inline void ItemInfo::add_locations(::google::protobuf::uint64 value) {
  locations_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.locations)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::locations() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.locations)
  return &locations_;
}

// repeated uint64 lbs_locations = 24;
inline int ItemInfo::lbs_locations_size() const {
  return lbs_locations_.size();
}
inline void ItemInfo::clear_lbs_locations() {
  lbs_locations_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::lbs_locations(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.lbs_locations)
  return lbs_locations_.Get(index);
}
inline void ItemInfo::set_lbs_locations(int index, ::google::protobuf::uint64 value) {
  lbs_locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.lbs_locations)
}
inline void ItemInfo::add_lbs_locations(::google::protobuf::uint64 value) {
  lbs_locations_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.lbs_locations)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::lbs_locations() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.lbs_locations)
  return lbs_locations_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_lbs_locations() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.lbs_locations)
  return &lbs_locations_;
}

// map<uint64, double> lda_vector = 25;
inline int ItemInfo::lda_vector_size() const {
  return lda_vector_.size();
}
inline void ItemInfo::clear_lda_vector() {
  lda_vector_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, double >&
ItemInfo::lda_vector() const {
  // @@protoc_insertion_point(field_map:predictor.feature.framework.ItemInfo.lda_vector)
  return lda_vector_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, double >*
ItemInfo::mutable_lda_vector() {
  // @@protoc_insertion_point(field_mutable_map:predictor.feature.framework.ItemInfo.lda_vector)
  return lda_vector_.MutableMap();
}

// int32 body_length = 26;
inline void ItemInfo::clear_body_length() {
  body_length_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::body_length() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.body_length)
  return body_length_;
}
inline void ItemInfo::set_body_length(::google::protobuf::int32 value) {
  
  body_length_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.body_length)
}

// repeated uint64 body_tags = 27;
inline int ItemInfo::body_tags_size() const {
  return body_tags_.size();
}
inline void ItemInfo::clear_body_tags() {
  body_tags_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::body_tags(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.body_tags)
  return body_tags_.Get(index);
}
inline void ItemInfo::set_body_tags(int index, ::google::protobuf::uint64 value) {
  body_tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.body_tags)
}
inline void ItemInfo::add_body_tags(::google::protobuf::uint64 value) {
  body_tags_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.body_tags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::body_tags() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.body_tags)
  return body_tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_body_tags() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.body_tags)
  return &body_tags_;
}

// int32 img_size = 28;
inline void ItemInfo::clear_img_size() {
  img_size_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::img_size() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.img_size)
  return img_size_;
}
inline void ItemInfo::set_img_size(::google::protobuf::int32 value) {
  
  img_size_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.img_size)
}

// int32 commend_count = 29;
inline void ItemInfo::clear_commend_count() {
  commend_count_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::commend_count() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.commend_count)
  return commend_count_;
}
inline void ItemInfo::set_commend_count(::google::protobuf::int32 value) {
  
  commend_count_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.commend_count)
}

// double avg_duration = 30;
inline void ItemInfo::clear_avg_duration() {
  avg_duration_ = 0;
}
inline double ItemInfo::avg_duration() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.avg_duration)
  return avg_duration_;
}
inline void ItemInfo::set_avg_duration(double value) {
  
  avg_duration_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.avg_duration)
}

// int32 have_gif = 31;
inline void ItemInfo::clear_have_gif() {
  have_gif_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::have_gif() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.have_gif)
  return have_gif_;
}
inline void ItemInfo::set_have_gif(::google::protobuf::int32 value) {
  
  have_gif_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.have_gif)
}

// double real_avg_duration = 32;
inline void ItemInfo::clear_real_avg_duration() {
  real_avg_duration_ = 0;
}
inline double ItemInfo::real_avg_duration() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.real_avg_duration)
  return real_avg_duration_;
}
inline void ItemInfo::set_real_avg_duration(double value) {
  
  real_avg_duration_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.real_avg_duration)
}

// double item_duration = 33;
inline void ItemInfo::clear_item_duration() {
  item_duration_ = 0;
}
inline double ItemInfo::item_duration() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.item_duration)
  return item_duration_;
}
inline void ItemInfo::set_item_duration(double value) {
  
  item_duration_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.item_duration)
}

// int32 upCount = 34;
inline void ItemInfo::clear_upcount() {
  upcount_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::upcount() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.upCount)
  return upcount_;
}
inline void ItemInfo::set_upcount(::google::protobuf::int32 value) {
  
  upcount_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.upCount)
}

// uint64 author_name = 35;
inline void ItemInfo::clear_author_name() {
  author_name_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ItemInfo::author_name() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.author_name)
  return author_name_;
}
inline void ItemInfo::set_author_name(::google::protobuf::uint64 value) {
  
  author_name_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.author_name)
}

// int32 copyrank = 36;
inline void ItemInfo::clear_copyrank() {
  copyrank_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::copyrank() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.copyrank)
  return copyrank_;
}
inline void ItemInfo::set_copyrank(::google::protobuf::int32 value) {
  
  copyrank_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.copyrank)
}

// int32 pornrank = 37;
inline void ItemInfo::clear_pornrank() {
  pornrank_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::pornrank() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.pornrank)
  return pornrank_;
}
inline void ItemInfo::set_pornrank(::google::protobuf::int32 value) {
  
  pornrank_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.pornrank)
}

// map<uint64, double> clarity = 38;
inline int ItemInfo::clarity_size() const {
  return clarity_.size();
}
inline void ItemInfo::clear_clarity() {
  clarity_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, double >&
ItemInfo::clarity() const {
  // @@protoc_insertion_point(field_map:predictor.feature.framework.ItemInfo.clarity)
  return clarity_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, double >*
ItemInfo::mutable_clarity() {
  // @@protoc_insertion_point(field_mutable_map:predictor.feature.framework.ItemInfo.clarity)
  return clarity_.MutableMap();
}

// map<uint64, double> blackBolder = 39;
inline int ItemInfo::blackbolder_size() const {
  return blackbolder_.size();
}
inline void ItemInfo::clear_blackbolder() {
  blackbolder_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, double >&
ItemInfo::blackbolder() const {
  // @@protoc_insertion_point(field_map:predictor.feature.framework.ItemInfo.blackBolder)
  return blackbolder_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, double >*
ItemInfo::mutable_blackbolder() {
  // @@protoc_insertion_point(field_mutable_map:predictor.feature.framework.ItemInfo.blackBolder)
  return blackbolder_.MutableMap();
}

// repeated uint64 nCategory1 = 40;
inline int ItemInfo::ncategory1_size() const {
  return ncategory1_.size();
}
inline void ItemInfo::clear_ncategory1() {
  ncategory1_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::ncategory1(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.nCategory1)
  return ncategory1_.Get(index);
}
inline void ItemInfo::set_ncategory1(int index, ::google::protobuf::uint64 value) {
  ncategory1_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.nCategory1)
}
inline void ItemInfo::add_ncategory1(::google::protobuf::uint64 value) {
  ncategory1_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.nCategory1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::ncategory1() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.nCategory1)
  return ncategory1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_ncategory1() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.nCategory1)
  return &ncategory1_;
}

// repeated uint64 nSubCategory1 = 41;
inline int ItemInfo::nsubcategory1_size() const {
  return nsubcategory1_.size();
}
inline void ItemInfo::clear_nsubcategory1() {
  nsubcategory1_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::nsubcategory1(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.nSubCategory1)
  return nsubcategory1_.Get(index);
}
inline void ItemInfo::set_nsubcategory1(int index, ::google::protobuf::uint64 value) {
  nsubcategory1_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.nSubCategory1)
}
inline void ItemInfo::add_nsubcategory1(::google::protobuf::uint64 value) {
  nsubcategory1_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.nSubCategory1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::nsubcategory1() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.nSubCategory1)
  return nsubcategory1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_nsubcategory1() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.nSubCategory1)
  return &nsubcategory1_;
}

// repeated uint64 nCategory2 = 42;
inline int ItemInfo::ncategory2_size() const {
  return ncategory2_.size();
}
inline void ItemInfo::clear_ncategory2() {
  ncategory2_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::ncategory2(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.nCategory2)
  return ncategory2_.Get(index);
}
inline void ItemInfo::set_ncategory2(int index, ::google::protobuf::uint64 value) {
  ncategory2_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.nCategory2)
}
inline void ItemInfo::add_ncategory2(::google::protobuf::uint64 value) {
  ncategory2_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.nCategory2)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::ncategory2() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.nCategory2)
  return ncategory2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_ncategory2() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.nCategory2)
  return &ncategory2_;
}

// repeated uint64 nSubCategory2 = 43;
inline int ItemInfo::nsubcategory2_size() const {
  return nsubcategory2_.size();
}
inline void ItemInfo::clear_nsubcategory2() {
  nsubcategory2_.Clear();
}
inline ::google::protobuf::uint64 ItemInfo::nsubcategory2(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.nSubCategory2)
  return nsubcategory2_.Get(index);
}
inline void ItemInfo::set_nsubcategory2(int index, ::google::protobuf::uint64 value) {
  nsubcategory2_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.nSubCategory2)
}
inline void ItemInfo::add_nsubcategory2(::google::protobuf::uint64 value) {
  nsubcategory2_.Add(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfo.nSubCategory2)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemInfo::nsubcategory2() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfo.nSubCategory2)
  return nsubcategory2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemInfo::mutable_nsubcategory2() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfo.nSubCategory2)
  return &nsubcategory2_;
}

// uint64 candidate_key = 50;
inline void ItemInfo::clear_candidate_key() {
  candidate_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ItemInfo::candidate_key() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.candidate_key)
  return candidate_key_;
}
inline void ItemInfo::set_candidate_key(::google::protobuf::uint64 value) {
  
  candidate_key_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.candidate_key)
}

// uint64 rank_queue = 51;
inline void ItemInfo::clear_rank_queue() {
  rank_queue_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ItemInfo::rank_queue() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.rank_queue)
  return rank_queue_;
}
inline void ItemInfo::set_rank_queue(::google::protobuf::uint64 value) {
  
  rank_queue_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.rank_queue)
}

// int32 position = 52;
inline void ItemInfo::clear_position() {
  position_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::position() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.position)
  return position_;
}
inline void ItemInfo::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.position)
}

// uint64 item_type = 53;
inline void ItemInfo::clear_item_type() {
  item_type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ItemInfo::item_type() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.item_type)
  return item_type_;
}
inline void ItemInfo::set_item_type(::google::protobuf::uint64 value) {
  
  item_type_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.item_type)
}

// int32 pctrBscore = 54;
inline void ItemInfo::clear_pctrbscore() {
  pctrbscore_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::pctrbscore() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfo.pctrBscore)
  return pctrbscore_;
}
inline void ItemInfo::set_pctrbscore(::google::protobuf::int32 value) {
  
  pctrbscore_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfo.pctrBscore)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ItemInfoOrigin

// string doc_id = 1;
inline void ItemInfoOrigin::clear_doc_id() {
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemInfoOrigin::doc_id() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.doc_id)
  return doc_id_.GetNoArena();
}
inline void ItemInfoOrigin::set_doc_id(const ::std::string& value) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.doc_id)
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_doc_id(::std::string&& value) {
  
  doc_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.ItemInfoOrigin.doc_id)
}
#endif
inline void ItemInfoOrigin::set_doc_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.doc_id)
}
inline void ItemInfoOrigin::set_doc_id(const char* value, size_t size) {
  
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.doc_id)
}
inline ::std::string* ItemInfoOrigin::mutable_doc_id() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.doc_id)
  return doc_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemInfoOrigin::release_doc_id() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.ItemInfoOrigin.doc_id)
  
  return doc_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfoOrigin::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id != NULL) {
    
  } else {
    
  }
  doc_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_id);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.ItemInfoOrigin.doc_id)
}

// int64 ts = 2;
inline void ItemInfoOrigin::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ItemInfoOrigin::ts() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.ts)
  return ts_;
}
inline void ItemInfoOrigin::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.ts)
}

// int32 real_time_ctr = 3;
inline void ItemInfoOrigin::clear_real_time_ctr() {
  real_time_ctr_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::real_time_ctr() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.real_time_ctr)
  return real_time_ctr_;
}
inline void ItemInfoOrigin::set_real_time_ctr(::google::protobuf::int32 value) {
  
  real_time_ctr_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.real_time_ctr)
}

// int32 total_ctr = 4;
inline void ItemInfoOrigin::clear_total_ctr() {
  total_ctr_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::total_ctr() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.total_ctr)
  return total_ctr_;
}
inline void ItemInfoOrigin::set_total_ctr(::google::protobuf::int32 value) {
  
  total_ctr_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.total_ctr)
}

// int32 quality = 5;
inline void ItemInfoOrigin::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::quality() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.quality)
  return quality_;
}
inline void ItemInfoOrigin::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.quality)
}

// int32 title_length = 6;
inline void ItemInfoOrigin::clear_title_length() {
  title_length_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::title_length() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.title_length)
  return title_length_;
}
inline void ItemInfoOrigin::set_title_length(::google::protobuf::int32 value) {
  
  title_length_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.title_length)
}

// int32 image_num = 7;
inline void ItemInfoOrigin::clear_image_num() {
  image_num_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::image_num() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.image_num)
  return image_num_;
}
inline void ItemInfoOrigin::set_image_num(::google::protobuf::int32 value) {
  
  image_num_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.image_num)
}

// string source = 8;
inline void ItemInfoOrigin::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemInfoOrigin::source() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.source)
  return source_.GetNoArena();
}
inline void ItemInfoOrigin::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.source)
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.ItemInfoOrigin.source)
}
#endif
inline void ItemInfoOrigin::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.source)
}
inline void ItemInfoOrigin::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.source)
}
inline ::std::string* ItemInfoOrigin::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemInfoOrigin::release_source() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.ItemInfoOrigin.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfoOrigin::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.ItemInfoOrigin.source)
}

// double chi_square_value = 9;
inline void ItemInfoOrigin::clear_chi_square_value() {
  chi_square_value_ = 0;
}
inline double ItemInfoOrigin::chi_square_value() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.chi_square_value)
  return chi_square_value_;
}
inline void ItemInfoOrigin::set_chi_square_value(double value) {
  
  chi_square_value_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.chi_square_value)
}

// double chi_square_value_hour = 10;
inline void ItemInfoOrigin::clear_chi_square_value_hour() {
  chi_square_value_hour_ = 0;
}
inline double ItemInfoOrigin::chi_square_value_hour() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.chi_square_value_hour)
  return chi_square_value_hour_;
}
inline void ItemInfoOrigin::set_chi_square_value_hour(double value) {
  
  chi_square_value_hour_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.chi_square_value_hour)
}

// double news_rank = 11;
inline void ItemInfoOrigin::clear_news_rank() {
  news_rank_ = 0;
}
inline double ItemInfoOrigin::news_rank() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.news_rank)
  return news_rank_;
}
inline void ItemInfoOrigin::set_news_rank(double value) {
  
  news_rank_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.news_rank)
}

// int32 static_quality = 12;
inline void ItemInfoOrigin::clear_static_quality() {
  static_quality_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::static_quality() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.static_quality)
  return static_quality_;
}
inline void ItemInfoOrigin::set_static_quality(::google::protobuf::int32 value) {
  
  static_quality_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.static_quality)
}

// repeated string tags = 20;
inline int ItemInfoOrigin::tags_size() const {
  return tags_.size();
}
inline void ItemInfoOrigin::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& ItemInfoOrigin::tags(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.tags)
  return tags_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.tags)
  return tags_.Mutable(index);
}
inline void ItemInfoOrigin::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.tags)
}
inline void ItemInfoOrigin::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.tags)
}
inline ::std::string* ItemInfoOrigin::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.tags)
  return tags_.Add();
}
inline void ItemInfoOrigin::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.tags)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.tags)
}
#endif
inline void ItemInfoOrigin::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.tags)
}
inline void ItemInfoOrigin::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::tags() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.tags)
  return &tags_;
}

// repeated string category = 21;
inline int ItemInfoOrigin::category_size() const {
  return category_.size();
}
inline void ItemInfoOrigin::clear_category() {
  category_.Clear();
}
inline const ::std::string& ItemInfoOrigin::category(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.category)
  return category_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.category)
  return category_.Mutable(index);
}
inline void ItemInfoOrigin::set_category(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.category)
  category_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_category(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.category)
  category_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_category(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  category_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.category)
}
inline void ItemInfoOrigin::set_category(int index, const char* value, size_t size) {
  category_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.category)
}
inline ::std::string* ItemInfoOrigin::add_category() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.category)
  return category_.Add();
}
inline void ItemInfoOrigin::add_category(const ::std::string& value) {
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.category)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_category(::std::string&& value) {
  category_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.category)
}
#endif
inline void ItemInfoOrigin::add_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.category)
}
inline void ItemInfoOrigin::add_category(const char* value, size_t size) {
  category_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.category)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::category() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.category)
  return category_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.category)
  return &category_;
}

// repeated string subcategories = 22;
inline int ItemInfoOrigin::subcategories_size() const {
  return subcategories_.size();
}
inline void ItemInfoOrigin::clear_subcategories() {
  subcategories_.Clear();
}
inline const ::std::string& ItemInfoOrigin::subcategories(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.subcategories)
  return subcategories_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_subcategories(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.subcategories)
  return subcategories_.Mutable(index);
}
inline void ItemInfoOrigin::set_subcategories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.subcategories)
  subcategories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_subcategories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.subcategories)
  subcategories_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_subcategories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subcategories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.subcategories)
}
inline void ItemInfoOrigin::set_subcategories(int index, const char* value, size_t size) {
  subcategories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.subcategories)
}
inline ::std::string* ItemInfoOrigin::add_subcategories() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.subcategories)
  return subcategories_.Add();
}
inline void ItemInfoOrigin::add_subcategories(const ::std::string& value) {
  subcategories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.subcategories)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_subcategories(::std::string&& value) {
  subcategories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.subcategories)
}
#endif
inline void ItemInfoOrigin::add_subcategories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subcategories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.subcategories)
}
inline void ItemInfoOrigin::add_subcategories(const char* value, size_t size) {
  subcategories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.subcategories)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::subcategories() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.subcategories)
  return subcategories_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_subcategories() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.subcategories)
  return &subcategories_;
}

// repeated string locations = 23;
inline int ItemInfoOrigin::locations_size() const {
  return locations_.size();
}
inline void ItemInfoOrigin::clear_locations() {
  locations_.Clear();
}
inline const ::std::string& ItemInfoOrigin::locations(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.locations)
  return locations_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.locations)
  return locations_.Mutable(index);
}
inline void ItemInfoOrigin::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.locations)
}
inline void ItemInfoOrigin::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.locations)
}
inline ::std::string* ItemInfoOrigin::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.locations)
  return locations_.Add();
}
inline void ItemInfoOrigin::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.locations)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.locations)
}
#endif
inline void ItemInfoOrigin::add_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.locations)
}
inline void ItemInfoOrigin::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.locations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::locations() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.locations)
  return &locations_;
}

// repeated string lbs_locations = 24;
inline int ItemInfoOrigin::lbs_locations_size() const {
  return lbs_locations_.size();
}
inline void ItemInfoOrigin::clear_lbs_locations() {
  lbs_locations_.Clear();
}
inline const ::std::string& ItemInfoOrigin::lbs_locations(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
  return lbs_locations_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_lbs_locations(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
  return lbs_locations_.Mutable(index);
}
inline void ItemInfoOrigin::set_lbs_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
  lbs_locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_lbs_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
  lbs_locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_lbs_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lbs_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
}
inline void ItemInfoOrigin::set_lbs_locations(int index, const char* value, size_t size) {
  lbs_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
}
inline ::std::string* ItemInfoOrigin::add_lbs_locations() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
  return lbs_locations_.Add();
}
inline void ItemInfoOrigin::add_lbs_locations(const ::std::string& value) {
  lbs_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_lbs_locations(::std::string&& value) {
  lbs_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
}
#endif
inline void ItemInfoOrigin::add_lbs_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lbs_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
}
inline void ItemInfoOrigin::add_lbs_locations(const char* value, size_t size) {
  lbs_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::lbs_locations() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
  return lbs_locations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_lbs_locations() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.lbs_locations)
  return &lbs_locations_;
}

// map<string, double> lda_vector = 25;
inline int ItemInfoOrigin::lda_vector_size() const {
  return lda_vector_.size();
}
inline void ItemInfoOrigin::clear_lda_vector() {
  lda_vector_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
ItemInfoOrigin::lda_vector() const {
  // @@protoc_insertion_point(field_map:predictor.feature.framework.ItemInfoOrigin.lda_vector)
  return lda_vector_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
ItemInfoOrigin::mutable_lda_vector() {
  // @@protoc_insertion_point(field_mutable_map:predictor.feature.framework.ItemInfoOrigin.lda_vector)
  return lda_vector_.MutableMap();
}

// int32 body_length = 26;
inline void ItemInfoOrigin::clear_body_length() {
  body_length_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::body_length() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.body_length)
  return body_length_;
}
inline void ItemInfoOrigin::set_body_length(::google::protobuf::int32 value) {
  
  body_length_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.body_length)
}

// repeated string body_tags = 27;
inline int ItemInfoOrigin::body_tags_size() const {
  return body_tags_.size();
}
inline void ItemInfoOrigin::clear_body_tags() {
  body_tags_.Clear();
}
inline const ::std::string& ItemInfoOrigin::body_tags(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.body_tags)
  return body_tags_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_body_tags(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.body_tags)
  return body_tags_.Mutable(index);
}
inline void ItemInfoOrigin::set_body_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.body_tags)
  body_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_body_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.body_tags)
  body_tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_body_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  body_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.body_tags)
}
inline void ItemInfoOrigin::set_body_tags(int index, const char* value, size_t size) {
  body_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.body_tags)
}
inline ::std::string* ItemInfoOrigin::add_body_tags() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.body_tags)
  return body_tags_.Add();
}
inline void ItemInfoOrigin::add_body_tags(const ::std::string& value) {
  body_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.body_tags)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_body_tags(::std::string&& value) {
  body_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.body_tags)
}
#endif
inline void ItemInfoOrigin::add_body_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  body_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.body_tags)
}
inline void ItemInfoOrigin::add_body_tags(const char* value, size_t size) {
  body_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.body_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::body_tags() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.body_tags)
  return body_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_body_tags() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.body_tags)
  return &body_tags_;
}

// int32 img_size = 28;
inline void ItemInfoOrigin::clear_img_size() {
  img_size_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::img_size() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.img_size)
  return img_size_;
}
inline void ItemInfoOrigin::set_img_size(::google::protobuf::int32 value) {
  
  img_size_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.img_size)
}

// int32 commend_count = 29;
inline void ItemInfoOrigin::clear_commend_count() {
  commend_count_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::commend_count() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.commend_count)
  return commend_count_;
}
inline void ItemInfoOrigin::set_commend_count(::google::protobuf::int32 value) {
  
  commend_count_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.commend_count)
}

// double avg_duration = 30;
inline void ItemInfoOrigin::clear_avg_duration() {
  avg_duration_ = 0;
}
inline double ItemInfoOrigin::avg_duration() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.avg_duration)
  return avg_duration_;
}
inline void ItemInfoOrigin::set_avg_duration(double value) {
  
  avg_duration_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.avg_duration)
}

// int32 have_gif = 31;
inline void ItemInfoOrigin::clear_have_gif() {
  have_gif_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::have_gif() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.have_gif)
  return have_gif_;
}
inline void ItemInfoOrigin::set_have_gif(::google::protobuf::int32 value) {
  
  have_gif_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.have_gif)
}

// double real_avg_duration = 32;
inline void ItemInfoOrigin::clear_real_avg_duration() {
  real_avg_duration_ = 0;
}
inline double ItemInfoOrigin::real_avg_duration() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.real_avg_duration)
  return real_avg_duration_;
}
inline void ItemInfoOrigin::set_real_avg_duration(double value) {
  
  real_avg_duration_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.real_avg_duration)
}

// double item_duration = 33;
inline void ItemInfoOrigin::clear_item_duration() {
  item_duration_ = 0;
}
inline double ItemInfoOrigin::item_duration() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.item_duration)
  return item_duration_;
}
inline void ItemInfoOrigin::set_item_duration(double value) {
  
  item_duration_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.item_duration)
}

// int32 upCount = 34;
inline void ItemInfoOrigin::clear_upcount() {
  upcount_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::upcount() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.upCount)
  return upcount_;
}
inline void ItemInfoOrigin::set_upcount(::google::protobuf::int32 value) {
  
  upcount_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.upCount)
}

// string author_name = 35;
inline void ItemInfoOrigin::clear_author_name() {
  author_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemInfoOrigin::author_name() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.author_name)
  return author_name_.GetNoArena();
}
inline void ItemInfoOrigin::set_author_name(const ::std::string& value) {
  
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.author_name)
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_author_name(::std::string&& value) {
  
  author_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.ItemInfoOrigin.author_name)
}
#endif
inline void ItemInfoOrigin::set_author_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.author_name)
}
inline void ItemInfoOrigin::set_author_name(const char* value, size_t size) {
  
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.author_name)
}
inline ::std::string* ItemInfoOrigin::mutable_author_name() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.author_name)
  return author_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemInfoOrigin::release_author_name() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.ItemInfoOrigin.author_name)
  
  return author_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfoOrigin::set_allocated_author_name(::std::string* author_name) {
  if (author_name != NULL) {
    
  } else {
    
  }
  author_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_name);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.ItemInfoOrigin.author_name)
}

// int32 copyrank = 36;
inline void ItemInfoOrigin::clear_copyrank() {
  copyrank_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::copyrank() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.copyrank)
  return copyrank_;
}
inline void ItemInfoOrigin::set_copyrank(::google::protobuf::int32 value) {
  
  copyrank_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.copyrank)
}

// int32 pornrank = 37;
inline void ItemInfoOrigin::clear_pornrank() {
  pornrank_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::pornrank() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.pornrank)
  return pornrank_;
}
inline void ItemInfoOrigin::set_pornrank(::google::protobuf::int32 value) {
  
  pornrank_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.pornrank)
}

// map<string, double> clarity = 38;
inline int ItemInfoOrigin::clarity_size() const {
  return clarity_.size();
}
inline void ItemInfoOrigin::clear_clarity() {
  clarity_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
ItemInfoOrigin::clarity() const {
  // @@protoc_insertion_point(field_map:predictor.feature.framework.ItemInfoOrigin.clarity)
  return clarity_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
ItemInfoOrigin::mutable_clarity() {
  // @@protoc_insertion_point(field_mutable_map:predictor.feature.framework.ItemInfoOrigin.clarity)
  return clarity_.MutableMap();
}

// map<string, double> blackBolder = 39;
inline int ItemInfoOrigin::blackbolder_size() const {
  return blackbolder_.size();
}
inline void ItemInfoOrigin::clear_blackbolder() {
  blackbolder_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
ItemInfoOrigin::blackbolder() const {
  // @@protoc_insertion_point(field_map:predictor.feature.framework.ItemInfoOrigin.blackBolder)
  return blackbolder_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
ItemInfoOrigin::mutable_blackbolder() {
  // @@protoc_insertion_point(field_mutable_map:predictor.feature.framework.ItemInfoOrigin.blackBolder)
  return blackbolder_.MutableMap();
}

// repeated string nCategory1 = 40;
inline int ItemInfoOrigin::ncategory1_size() const {
  return ncategory1_.size();
}
inline void ItemInfoOrigin::clear_ncategory1() {
  ncategory1_.Clear();
}
inline const ::std::string& ItemInfoOrigin::ncategory1(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.nCategory1)
  return ncategory1_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_ncategory1(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.nCategory1)
  return ncategory1_.Mutable(index);
}
inline void ItemInfoOrigin::set_ncategory1(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.nCategory1)
  ncategory1_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_ncategory1(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.nCategory1)
  ncategory1_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_ncategory1(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ncategory1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.nCategory1)
}
inline void ItemInfoOrigin::set_ncategory1(int index, const char* value, size_t size) {
  ncategory1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.nCategory1)
}
inline ::std::string* ItemInfoOrigin::add_ncategory1() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.nCategory1)
  return ncategory1_.Add();
}
inline void ItemInfoOrigin::add_ncategory1(const ::std::string& value) {
  ncategory1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.nCategory1)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_ncategory1(::std::string&& value) {
  ncategory1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.nCategory1)
}
#endif
inline void ItemInfoOrigin::add_ncategory1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ncategory1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.nCategory1)
}
inline void ItemInfoOrigin::add_ncategory1(const char* value, size_t size) {
  ncategory1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.nCategory1)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::ncategory1() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.nCategory1)
  return ncategory1_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_ncategory1() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.nCategory1)
  return &ncategory1_;
}

// repeated string nSubCategory1 = 41;
inline int ItemInfoOrigin::nsubcategory1_size() const {
  return nsubcategory1_.size();
}
inline void ItemInfoOrigin::clear_nsubcategory1() {
  nsubcategory1_.Clear();
}
inline const ::std::string& ItemInfoOrigin::nsubcategory1(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
  return nsubcategory1_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_nsubcategory1(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
  return nsubcategory1_.Mutable(index);
}
inline void ItemInfoOrigin::set_nsubcategory1(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
  nsubcategory1_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_nsubcategory1(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
  nsubcategory1_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_nsubcategory1(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nsubcategory1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
}
inline void ItemInfoOrigin::set_nsubcategory1(int index, const char* value, size_t size) {
  nsubcategory1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
}
inline ::std::string* ItemInfoOrigin::add_nsubcategory1() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
  return nsubcategory1_.Add();
}
inline void ItemInfoOrigin::add_nsubcategory1(const ::std::string& value) {
  nsubcategory1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_nsubcategory1(::std::string&& value) {
  nsubcategory1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
}
#endif
inline void ItemInfoOrigin::add_nsubcategory1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nsubcategory1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
}
inline void ItemInfoOrigin::add_nsubcategory1(const char* value, size_t size) {
  nsubcategory1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::nsubcategory1() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
  return nsubcategory1_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_nsubcategory1() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.nSubCategory1)
  return &nsubcategory1_;
}

// repeated string nCategory2 = 42;
inline int ItemInfoOrigin::ncategory2_size() const {
  return ncategory2_.size();
}
inline void ItemInfoOrigin::clear_ncategory2() {
  ncategory2_.Clear();
}
inline const ::std::string& ItemInfoOrigin::ncategory2(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.nCategory2)
  return ncategory2_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_ncategory2(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.nCategory2)
  return ncategory2_.Mutable(index);
}
inline void ItemInfoOrigin::set_ncategory2(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.nCategory2)
  ncategory2_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_ncategory2(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.nCategory2)
  ncategory2_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_ncategory2(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ncategory2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.nCategory2)
}
inline void ItemInfoOrigin::set_ncategory2(int index, const char* value, size_t size) {
  ncategory2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.nCategory2)
}
inline ::std::string* ItemInfoOrigin::add_ncategory2() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.nCategory2)
  return ncategory2_.Add();
}
inline void ItemInfoOrigin::add_ncategory2(const ::std::string& value) {
  ncategory2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.nCategory2)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_ncategory2(::std::string&& value) {
  ncategory2_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.nCategory2)
}
#endif
inline void ItemInfoOrigin::add_ncategory2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ncategory2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.nCategory2)
}
inline void ItemInfoOrigin::add_ncategory2(const char* value, size_t size) {
  ncategory2_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.nCategory2)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::ncategory2() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.nCategory2)
  return ncategory2_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_ncategory2() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.nCategory2)
  return &ncategory2_;
}

// repeated string nSubCategory2 = 43;
inline int ItemInfoOrigin::nsubcategory2_size() const {
  return nsubcategory2_.size();
}
inline void ItemInfoOrigin::clear_nsubcategory2() {
  nsubcategory2_.Clear();
}
inline const ::std::string& ItemInfoOrigin::nsubcategory2(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
  return nsubcategory2_.Get(index);
}
inline ::std::string* ItemInfoOrigin::mutable_nsubcategory2(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
  return nsubcategory2_.Mutable(index);
}
inline void ItemInfoOrigin::set_nsubcategory2(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
  nsubcategory2_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_nsubcategory2(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
  nsubcategory2_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ItemInfoOrigin::set_nsubcategory2(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nsubcategory2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
}
inline void ItemInfoOrigin::set_nsubcategory2(int index, const char* value, size_t size) {
  nsubcategory2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
}
inline ::std::string* ItemInfoOrigin::add_nsubcategory2() {
  // @@protoc_insertion_point(field_add_mutable:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
  return nsubcategory2_.Add();
}
inline void ItemInfoOrigin::add_nsubcategory2(const ::std::string& value) {
  nsubcategory2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
}
#if LANG_CXX11
inline void ItemInfoOrigin::add_nsubcategory2(::std::string&& value) {
  nsubcategory2_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
}
#endif
inline void ItemInfoOrigin::add_nsubcategory2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nsubcategory2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
}
inline void ItemInfoOrigin::add_nsubcategory2(const char* value, size_t size) {
  nsubcategory2_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemInfoOrigin::nsubcategory2() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
  return nsubcategory2_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemInfoOrigin::mutable_nsubcategory2() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoOrigin.nSubCategory2)
  return &nsubcategory2_;
}

// string candidate_key = 100;
inline void ItemInfoOrigin::clear_candidate_key() {
  candidate_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemInfoOrigin::candidate_key() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.candidate_key)
  return candidate_key_.GetNoArena();
}
inline void ItemInfoOrigin::set_candidate_key(const ::std::string& value) {
  
  candidate_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.candidate_key)
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_candidate_key(::std::string&& value) {
  
  candidate_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.ItemInfoOrigin.candidate_key)
}
#endif
inline void ItemInfoOrigin::set_candidate_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  candidate_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.candidate_key)
}
inline void ItemInfoOrigin::set_candidate_key(const char* value, size_t size) {
  
  candidate_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.candidate_key)
}
inline ::std::string* ItemInfoOrigin::mutable_candidate_key() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.candidate_key)
  return candidate_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemInfoOrigin::release_candidate_key() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.ItemInfoOrigin.candidate_key)
  
  return candidate_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfoOrigin::set_allocated_candidate_key(::std::string* candidate_key) {
  if (candidate_key != NULL) {
    
  } else {
    
  }
  candidate_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate_key);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.ItemInfoOrigin.candidate_key)
}

// string rank_queue = 101;
inline void ItemInfoOrigin::clear_rank_queue() {
  rank_queue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemInfoOrigin::rank_queue() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.rank_queue)
  return rank_queue_.GetNoArena();
}
inline void ItemInfoOrigin::set_rank_queue(const ::std::string& value) {
  
  rank_queue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.rank_queue)
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_rank_queue(::std::string&& value) {
  
  rank_queue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.ItemInfoOrigin.rank_queue)
}
#endif
inline void ItemInfoOrigin::set_rank_queue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rank_queue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.rank_queue)
}
inline void ItemInfoOrigin::set_rank_queue(const char* value, size_t size) {
  
  rank_queue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.rank_queue)
}
inline ::std::string* ItemInfoOrigin::mutable_rank_queue() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.rank_queue)
  return rank_queue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemInfoOrigin::release_rank_queue() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.ItemInfoOrigin.rank_queue)
  
  return rank_queue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfoOrigin::set_allocated_rank_queue(::std::string* rank_queue) {
  if (rank_queue != NULL) {
    
  } else {
    
  }
  rank_queue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rank_queue);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.ItemInfoOrigin.rank_queue)
}

// int32 position = 102;
inline void ItemInfoOrigin::clear_position() {
  position_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::position() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.position)
  return position_;
}
inline void ItemInfoOrigin::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.position)
}

// string item_type = 103;
inline void ItemInfoOrigin::clear_item_type() {
  item_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemInfoOrigin::item_type() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.item_type)
  return item_type_.GetNoArena();
}
inline void ItemInfoOrigin::set_item_type(const ::std::string& value) {
  
  item_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.item_type)
}
#if LANG_CXX11
inline void ItemInfoOrigin::set_item_type(::std::string&& value) {
  
  item_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:predictor.feature.framework.ItemInfoOrigin.item_type)
}
#endif
inline void ItemInfoOrigin::set_item_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:predictor.feature.framework.ItemInfoOrigin.item_type)
}
inline void ItemInfoOrigin::set_item_type(const char* value, size_t size) {
  
  item_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:predictor.feature.framework.ItemInfoOrigin.item_type)
}
inline ::std::string* ItemInfoOrigin::mutable_item_type() {
  
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoOrigin.item_type)
  return item_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemInfoOrigin::release_item_type() {
  // @@protoc_insertion_point(field_release:predictor.feature.framework.ItemInfoOrigin.item_type)
  
  return item_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfoOrigin::set_allocated_item_type(::std::string* item_type) {
  if (item_type != NULL) {
    
  } else {
    
  }
  item_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_type);
  // @@protoc_insertion_point(field_set_allocated:predictor.feature.framework.ItemInfoOrigin.item_type)
}

// int32 pctrBscore = 104;
inline void ItemInfoOrigin::clear_pctrbscore() {
  pctrbscore_ = 0;
}
inline ::google::protobuf::int32 ItemInfoOrigin::pctrbscore() const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoOrigin.pctrBscore)
  return pctrbscore_;
}
inline void ItemInfoOrigin::set_pctrbscore(::google::protobuf::int32 value) {
  
  pctrbscore_ = value;
  // @@protoc_insertion_point(field_set:predictor.feature.framework.ItemInfoOrigin.pctrBscore)
}

// -------------------------------------------------------------------

// ItemInfoList

// repeated .predictor.feature.framework.ItemInfo item_info_list = 1;
inline int ItemInfoList::item_info_list_size() const {
  return item_info_list_.size();
}
inline void ItemInfoList::clear_item_info_list() {
  item_info_list_.Clear();
}
inline const ::predictor::feature::framework::ItemInfo& ItemInfoList::item_info_list(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoList.item_info_list)
  return item_info_list_.Get(index);
}
inline ::predictor::feature::framework::ItemInfo* ItemInfoList::mutable_item_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoList.item_info_list)
  return item_info_list_.Mutable(index);
}
inline ::predictor::feature::framework::ItemInfo* ItemInfoList::add_item_info_list() {
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoList.item_info_list)
  return item_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfo >*
ItemInfoList::mutable_item_info_list() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoList.item_info_list)
  return &item_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfo >&
ItemInfoList::item_info_list() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoList.item_info_list)
  return item_info_list_;
}

// repeated .predictor.feature.framework.ItemInfoOrigin item_info_origin_list = 10;
inline int ItemInfoList::item_info_origin_list_size() const {
  return item_info_origin_list_.size();
}
inline void ItemInfoList::clear_item_info_origin_list() {
  item_info_origin_list_.Clear();
}
inline const ::predictor::feature::framework::ItemInfoOrigin& ItemInfoList::item_info_origin_list(int index) const {
  // @@protoc_insertion_point(field_get:predictor.feature.framework.ItemInfoList.item_info_origin_list)
  return item_info_origin_list_.Get(index);
}
inline ::predictor::feature::framework::ItemInfoOrigin* ItemInfoList::mutable_item_info_origin_list(int index) {
  // @@protoc_insertion_point(field_mutable:predictor.feature.framework.ItemInfoList.item_info_origin_list)
  return item_info_origin_list_.Mutable(index);
}
inline ::predictor::feature::framework::ItemInfoOrigin* ItemInfoList::add_item_info_origin_list() {
  // @@protoc_insertion_point(field_add:predictor.feature.framework.ItemInfoList.item_info_origin_list)
  return item_info_origin_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfoOrigin >*
ItemInfoList::mutable_item_info_origin_list() {
  // @@protoc_insertion_point(field_mutable_list:predictor.feature.framework.ItemInfoList.item_info_origin_list)
  return &item_info_origin_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::predictor::feature::framework::ItemInfoOrigin >&
ItemInfoList::item_info_origin_list() const {
  // @@protoc_insertion_point(field_list:predictor.feature.framework.ItemInfoList.item_info_origin_list)
  return item_info_origin_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace framework
}  // namespace feature
}  // namespace predictor

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_feature_2eproto__INCLUDED
